
> movietier-backend@1.0.0 test
> jest

[2m[2025-10-29T06:01:41.212Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:41.264Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:41.845Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:41.885Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:41.900Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:41.967Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:42.044Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:42.357Z][0m [36mINFO[0m Profile update request for user 6901adc6a49bedc182292ede {
  "name": "updating"
}
[2m[2025-10-29T06:01:42.379Z][0m [32mSUCCESS[0m Profile updated for user 6901adc6a49bedc182292ede
[2m[2025-10-29T06:01:42.409Z][0m [36mINFO[0m Profile update request for user 6901adc6a49bedc182292ede {
  "name": "unchanged"
}
[2m[2025-10-29T06:01:42.409Z][0m [33mWARN[0m Profile update failed: no name provided
[2m[2025-10-29T06:01:42.743Z][0m [36mINFO[0m Profile update request for user 6901adc692995c6e71a23ed4 {
  "name": "updating"
}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 118ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.115Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.190Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:43.253Z][0m [32mSUCCESS[0m Profile updated for user 6901adc692995c6e71a23ed4
🌐 TMDB ⬅️  GET /movie/278/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.266Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc6e0bf15ca10b3c526",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:43.275Z][0m [36mINFO[0m Profile update request for user 6901adc692995c6e71a23ed4 {
  "name": "unchanged"
}
[2m[2025-10-29T06:01:43.275Z][0m [33mWARN[0m Profile update failed: no name provided
[2m[2025-10-29T06:01:43.281Z][0m [36mINFO[0m Profile update request for user 6901adc692995c6e71a23ed4 {
  "name": "updating"
}
[2m[2025-10-29T06:01:43.286Z][0m [32mSUCCESS[0m Profile updated for user 6901adc692995c6e71a23ed4
[2m[2025-10-29T06:01:43.292Z][0m [36mINFO[0m Profile update request for user 6901adc692995c6e71a23ed4 {
  "name": "unchanged"
}
[2m[2025-10-29T06:01:43.292Z][0m [33mWARN[0m Profile update failed: no name provided
[2m[2025-10-29T06:01:43.297Z][0m [36mINFO[0m Profile update request for user 6901adc692995c6e71a23ed4 {
  "name": "updating"
}
[2m[2025-10-29T06:01:43.297Z][0m [33mWARN[0m Profile update failed: empty name
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.337Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc6e0bf15ca10b3c526",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.413Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc6e0bf15ca10b3c526",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 124ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/238/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:43.486Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc6e0bf15ca10b3c526",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 71ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 73ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 72ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 184ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205 ERROR 128ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
[2m[2025-10-29T06:01:43.968Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 72ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/157336 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 77ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.047Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 155,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/157336 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/157336 ERROR 72ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/157336 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.118Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 157336,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.192Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.267Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 155,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/157336/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/157336/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.340Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 157336,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.414Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.488Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 155,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/157336/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/157336/recommendations ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.557Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 157336,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.648Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 119ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 113ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.761Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.836Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 77ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /search/movie params={"query":"Inception","include_adult":false,"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:44.929Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27206 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 171ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27206 ERROR 82ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.012Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27206,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27207 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 114ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /search/movie ERROR 118ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27207 ERROR 82ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.095Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27207,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27208 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 75ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 77ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27208 ERROR 101ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.196Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27208,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27209 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 111ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 183ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27209 ERROR 212ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.409Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27209,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 125ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.484Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27206/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 74ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/238 ERROR 80ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 153ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27206/similar ERROR 114ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.599Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27206,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27207/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 119ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27207/similar ERROR 82ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.681Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27207,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
[2m[2025-10-29T06:01:45.689Z][0m [32mSUCCESS[0m FCM token registered for user 6901adc9a49bedc182292ee1
🌐 TMDB ⬅️  GET /movie/278 ERROR 77ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205 ERROR 114ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 140ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.821Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27206/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27206/recommendations ERROR 81ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.902Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27206,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27207/recommendations params={"page":1,"api_key":"***"}
[2m[2025-10-29T06:01:45.959Z][0m [31mERROR[0m Error sending feed notification: {
  "code": "messaging/invalid-argument",
  "message": "The registration token is not a valid FCM registration token"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27207/recommendations ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:45.977Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27207,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /trending/movie/week params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 70ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /trending/movie/week ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.053Z][0m [31mERROR[0m Trending movies error {
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
[2m[2025-10-29T06:01:46.084Z][0m [31mERROR[0m Error sending feed notification: {
  "code": "messaging/invalid-argument",
  "message": "The registration token is not a valid FCM registration token"
}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 129ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.202Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ➡️  GET /movie/200000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.273Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200000 ERROR 75ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/200000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 113ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.387Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
FAIL tests/mocked/feedRoutes.mocked.test.ts (16.983 s)
  Feed Routes - Mocked Error Tests
    GET / (friends feed) error handling
      ✓ should handle TMDB enrichment errors gracefully (2135 ms)
      ✓ should handle database error gracefully (16 ms)
    GET /me error handling
      ✓ should handle TMDB enrichment errors gracefully (20 ms)
      ✓ should handle database error gracefully (13 ms)
    GET /stream error handling
      ✓ should handle SSE setup errors gracefully (11 ms)
    POST /:activityId/like error handling
      ✕ should handle notification errors gracefully (42 ms)
      ✓ should handle duplicate like error (22 ms)
      ✓ should handle database error gracefully (18 ms)
    DELETE /:activityId/like error handling
      ✓ should handle database error gracefully (11 ms)
    GET /:activityId/comments error handling
      ✓ should handle database error gracefully (18 ms)
    POST /:activityId/comments error handling
      ✕ should handle notification errors gracefully (33 ms)
      ✓ should handle database error gracefully (17 ms)

  ● Feed Routes - Mocked Error Tests › POST /:activityId/like error handling › should handle notification errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      217 |
      218 |       // Should still succeed even if notification fails
    > 219 |       expect(res.status).toBe(200);
          |                          ^
      220 |       expect(res.body.success).toBe(true);
      221 |     });
      222 |

      at Object.<anonymous> (tests/mocked/feedRoutes.mocked.test.ts:219:26)

  ● Feed Routes - Mocked Error Tests › POST /:activityId/comments error handling › should handle notification errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      342 |
      343 |       // Should still succeed even if notification fails
    > 344 |       expect(res.status).toBe(200);
          |                          ^
      345 |       expect(res.body.success).toBe(true);
      346 |     });
      347 |

      at Object.<anonymous> (tests/mocked/feedRoutes.mocked.test.ts:344:26)

🌐 TMDB ⬅️  GET /movie/200000 ERROR 123ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.466Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:46.468Z][0m [32mSUCCESS[0m FCM token registered for user 6901adc992995c6e71a23edb
[2m[2025-10-29T06:01:46.483Z][0m [32mSUCCESS[0m FCM token registered for user 6901adc992995c6e71a23edb
[2m[2025-10-29T06:01:46.505Z][0m [31mERROR[0m Error sending feed notification: {
  "code": "messaging/invalid-argument",
  "message": "The registration token is not a valid FCM registration token"
}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.540Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ➡️  GET /trending/movie/week params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.609Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
FAIL tests/unmocked/movieComparisonAdvanced.unmocked.test.ts (17.128 s)
  Advanced Movie Comparison Controller Tests
    ✓ should complete binary search taking left path (71 ms)
    ✓ should complete binary search taking right path (22 ms)
    ✕ should remove movie from watchlist when ranking (18 ms)
    ✓ should handle comparison with 10 existing movies (31 ms)
    ✓ should correctly rank movie at position 1 (16 ms)
    ✓ should correctly rank movie at last position (14 ms)
    ✕ should handle multiple watchlist items during ranking (14 ms)
    ✓ should handle comparison with exact middle movie selection (16 ms)
    ✓ should handle invalid movie ID in comparison (11 ms)
    ✓ should handle comparison without active ranking session (4 ms)
    ✓ should handle ranking with incomplete movie data (14 ms)
    ✓ should handle sequential ranking of multiple movies (13 ms)
    ✓ should handle ranking 15 movies with comparisons (125 ms)
    ✓ should handle all preference combinations in 4-movie ranking (11 ms)
    ✓ should handle deep binary search with 20 movies (30 ms)

  ● Advanced Movie Comparison Controller Tests › should remove movie from watchlist when ranking

    expect(received).toBeNull()

    Received: {"__v": 0, "_id": "6901adc8abcf862665fb43d7", "createdAt": 2025-10-29T06:01:44.891Z, "movieId": 27205, "overview": "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea.", "posterPath": "/oYm8f6YSxFab6XwaxmTeGa90RWl.jpg", "title": "Inception", "updatedAt": 2025-10-29T06:01:44.891Z, "userId": "6901adc7abcf862665fb43b4"}

      165 |       movieId: mockMovies.inception.id
      166 |     });
    > 167 |     expect(watchlistItem).toBeNull();
          |                           ^
      168 |   });
      169 |
      170 |   // Test Case 4: Complex comparison with 10 movies

      at Object.<anonymous> (tests/unmocked/movieComparisonAdvanced.unmocked.test.ts:167:27)

  ● Advanced Movie Comparison Controller Tests › should handle multiple watchlist items during ranking

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 2

      364 |     // Both should be removed from watchlist
      365 |     const count = await WatchlistItem.countDocuments({ userId: user._id });
    > 366 |     expect(count).toBe(0);
          |                   ^
      367 |   });
      368 |
      369 |   // Test Case 8: Comparison with exact middle selection

      at Object.<anonymous> (tests/unmocked/movieComparisonAdvanced.unmocked.test.ts:366:19)

🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /trending/movie/week ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.640Z][0m [31mERROR[0m Trending movies error {
  "error": "Request failed with status code 401"
}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.702Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.771Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 155,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
FAIL tests/unmocked/user.unmocked.test.ts (17.277 s)
  Unmocked: PUT /users/profile
    ✕ should successfully update user profile name (64 ms)
    ✓ should reject empty name update (9 ms)
    ✓ should reject profile update without authentication (6 ms)
  Unmocked: POST /users/fcm-token
    ✓ should successfully register FCM token (157 ms)
    ✓ should reject missing FCM token (5 ms)
    ✓ should reject FCM token registration without authentication (3 ms)

  ● Unmocked: PUT /users/profile › should successfully update user profile name

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "Updated Name"
    Received: undefined

      47 |
      48 |     expect(res.status).toStrictEqual(200);
    > 49 |     expect(res.body.name).toStrictEqual(newName);
         |                           ^
      50 |
      51 |     // Verify update in database
      52 |     const updatedUser = await User.findById(user._id);

      at Object.<anonymous> (tests/unmocked/user.unmocked.test.ts:49:27)

🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.844Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.915Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 155,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:46.990Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/155/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:47.065Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adc685eefdc9bd32ed8a",
  "movieId": 155,
  "error": "Request failed with status code 401"
}
FAIL tests/unmocked/recommendations.unmocked.test.ts (18.079 s)
  Unmocked: GET /recommendations
    ✓ should return recommendations for user with ranked movies (724 ms)
    ✓ should return empty recommendations for user with no ranked movies (12 ms)
    ✓ should reject unauthenticated recommendation request (7 ms)
  Unmocked: GET /recommendations/trending
    ✕ should return trending movies (77 ms)
    ✓ should reject unauthenticated trending request (3 ms)

  ● Unmocked: GET /recommendations/trending › should return trending movies

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      127 |       .set('Authorization', `Bearer ${token}`);
      128 |
    > 129 |     expect(res.status).toStrictEqual(200);
          |                        ^
      130 |     expect(res.body.success).toBe(true);
      131 |     expect(Array.isArray(res.body.data)).toBe(true);
      132 |   });

      at Object.<anonymous> (tests/unmocked/recommendations.unmocked.test.ts:129:24)

[2m[2025-10-29T06:01:47.880Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
FAIL tests/unmocked/movieComparisonController.unmocked.test.ts (18.405 s)
  Movie Comparison Controller - Complete Coverage
    ✓ should add first movie with rank 1 (94 ms)
    ✓ should remove from watchlist when adding first movie (258 ms)
    ✓ should create feed activity when adding first movie (23 ms)
    ✓ should delete old feed activities when adding first movie (101 ms)
    ✓ should enrich missing posterPath and overview from TMDB (140 ms)
    ✓ should send SSE notification to friends when adding first movie (297 ms)
    ✓ should handle FCM notification failure gracefully (125 ms)
    ✓ should reject duplicate movie (11 ms)
    ✓ should remove from watchlist even for duplicate movie (16 ms)
    ✓ should start comparison session with existing movies (20 ms)
    ✓ should remove from watchlist when starting comparison (11 ms)
    ✓ should calculate middle index correctly for comparison (10 ms)
    ✕ should reject comparison without active session (7 ms)
    ✓ should handle preferring new movie in comparison (15 ms)
    ✓ should handle preferring existing movie in comparison (15 ms)
    ✕ should finalize ranking when low > high (13 ms)
    ✕ should update ranks when finalizing (14 ms)
    ✓ should create feed activity when finalizing (100 ms)
    ✓ should send notifications when finalizing (184 ms)
    ✓ should continue comparison when not finalized (20 ms)
    ✓ should handle error in addMovie (30 ms)
    ✓ should handle error in compareMovies (29 ms)

  ● Movie Comparison Controller - Complete Coverage › should reject comparison without active session

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      354 |       });
      355 |
    > 356 |     expect(res.status).toBe(400);
          |                        ^
      357 |     expect(res.body.message).toContain('No active comparison');
      358 |   });
      359 |

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:356:24)

  ● Movie Comparison Controller - Complete Coverage › should finalize ranking when low > high

    expect(received).toBe(expected) // Object.is equality

    Expected: "added"
    Received: "compare"

      490 |       });
      491 |
    > 492 |     expect(res.body.status).toBe('added');
          |                             ^
      493 |     const movie = await RankedMovie.findOne({
      494 |       userId: user1._id,
      495 |       movieId: 200000

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:492:29)

  ● Movie Comparison Controller - Complete Coverage › should update ranks when finalizing

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      533 |
      534 |     const movies = await RankedMovie.find({ userId: user1._id }).sort({ rank: 1 });
    > 535 |     expect(movies.length).toBe(3);
          |                           ^
      536 |   });
      537 |
      538 |   it('should create feed activity when finalizing', async () => {

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:535:27)

[2m[2025-10-29T06:01:48.182Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
FAIL tests/unmocked/allFeedRoutes.unmocked.test.ts
  Comprehensive Feed Routes Tests
    ✕ should get empty feed with no friends
    ✕ should get feed with friend activities
    ✕ should like a feed activity
    ✕ should handle duplicate like
    ✕ should unlike a feed activity
    ✕ should get comments for activity (1 ms)
    ✕ should add comment to activity
    ✕ should handle empty comment
    ✕ should handle long comment
    ✕ should handle liking non-existent activity
    ✕ should handle unliking when no like exists
    ✕ should handle commenting on non-existent activity
    ✕ should handle feed pagination
    ✕ should get multiple comments
    ✕ should handle different activity types
    ✕ should reject unauthorized feed access
    ✕ should handle invalid activity ID format

  ● Comprehensive Feed Routes Tests › should get empty feed with no friends

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get feed with friend activities

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should like a feed activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle duplicate like

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should unlike a feed activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get comments for activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should add comment to activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle empty comment

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle long comment

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle liking non-existent activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle unliking when no like exists

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle commenting on non-existent activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle feed pagination

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get multiple comments

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle different activity types

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should reject unauthorized feed access

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle invalid activity ID format

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

🌐 TMDB ➡️  GET /movie/157336 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/157336 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:48.892Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
FAIL tests/mocked/apis.mocked.test.ts
  Mocked: Feed API Errors
    ✕ should handle feed fetch failure (14 ms)
    ✕ should handle like creation failure (10 ms)
    ✕ should handle invalid comment text (4 ms)
  Mocked: Friends API Errors
    ✕ should handle friends list fetch failure (3 ms)
    ✕ should handle friend request creation failure (4 ms)
    ✕ should handle user lookup failure (2 ms)
  Mocked: Watchlist API Errors
    ✕ should handle watchlist fetch failure (2 ms)
    ✕ should handle watchlist item creation failure (2 ms)
    ✕ should handle watchlist item deletion failure (2 ms)
  Mocked: Recommendations API Errors
    ✕ should handle trending movies fetch failure (5 ms)
    ✕ should handle recommendations generation failure
  Mocked: User API Errors
    ✕ should handle profile update failure (3 ms)
    ✕ should handle FCM token registration failure (2 ms)

  ● Mocked: Feed API Errors › should handle feed fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      44 |       .set('Authorization', `Bearer ${token}`);
      45 |
    > 46 |     expect(res.status).toStrictEqual(500);
         |                        ^
      47 |   });
      48 |
      49 |   // Mocked behavior: Like creation fails due to database error

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:46:24)

  ● Mocked: Feed API Errors › should handle like creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      62 |       .send({});
      63 |
    > 64 |     expect(res.status).toStrictEqual(500);
         |                        ^
      65 |   });
      66 |
      67 |   // Mocked behavior: Comment validation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:64:24)

  ● Mocked: Feed API Errors › should handle invalid comment text

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      76 |       .send({ text: null });
      77 |
    > 78 |     expect(res.status).toStrictEqual(400);
         |                        ^
      79 |   });
      80 | });
      81 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:78:24)

  ● Mocked: Friends API Errors › should handle friends list fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      105 |       .set('Authorization', `Bearer ${token}`);
      106 |
    > 107 |     expect(res.status).toStrictEqual(500);
          |                        ^
      108 |   });
      109 |
      110 |   // Mocked behavior: Friend request database error

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:107:24)

  ● Mocked: Friends API Errors › should handle friend request creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      123 |       .send({ email: 'test@example.com' });
      124 |
    > 125 |     expect(res.status).toStrictEqual(500);
          |                        ^
      126 |   });
      127 |
      128 |   // Mocked behavior: User lookup fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:125:24)

  ● Mocked: Friends API Errors › should handle user lookup failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      141 |       .send({ email: 'nonexistent@example.com' });
      142 |
    > 143 |     expect(res.status).toStrictEqual(500);
          |                        ^
      144 |   });
      145 | });
      146 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:143:24)

  ● Mocked: Watchlist API Errors › should handle watchlist fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      170 |       .set('Authorization', `Bearer ${token}`);
      171 |
    > 172 |     expect(res.status).toStrictEqual(500);
          |                        ^
      173 |   });
      174 |
      175 |   // Mocked behavior: Item creation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:172:24)

  ● Mocked: Watchlist API Errors › should handle watchlist item creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      188 |       .send({ movieId: 278, title: 'Movie' });
      189 |
    > 190 |     expect(res.status).toStrictEqual(500);
          |                        ^
      191 |   });
      192 |
      193 |   // Mocked behavior: Delete operation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:190:24)

  ● Mocked: Watchlist API Errors › should handle watchlist item deletion failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      205 |       .set('Authorization', `Bearer ${token}`);
      206 |
    > 207 |     expect(res.status).toStrictEqual(500);
          |                        ^
      208 |   });
      209 | });
      210 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:207:24)

  ● Mocked: Recommendations API Errors › should handle trending movies fetch failure

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [500, 200]

      235 |       .set('Authorization', `Bearer ${token}`);
      236 |
    > 237 |     expect([500, 200]).toContain(res.status); // May cache or fail
          |                        ^
      238 |   });
      239 |
      240 |   // Mocked behavior: Database query fails for recommendations

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:237:24)

  ● Mocked: Recommendations API Errors › should handle recommendations generation failure

    Property `find` does not exist in the provided object

      244 |   // Expected output: Error message
      245 |   it('should handle recommendations generation failure', async () => {
    > 246 |     jest.spyOn(require('../../src/models/movie/RankedMovie'), 'find')
          |          ^
      247 |       .mockRejectedValueOnce(new Error('Database error'));
      248 |
      249 |     const res = await request(app)

      at ModuleMocker.spyOn (node_modules/jest-mock/build/index.js:731:13)
      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:246:10)

  ● Mocked: User API Errors › should handle profile update failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      281 |       .send({ name: 'New Name' });
      282 |
    > 283 |     expect(res.status).toStrictEqual(500);
          |                        ^
      284 |   });
      285 |
      286 |   // Mocked behavior: FCM token registration fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:283:24)

  ● Mocked: User API Errors › should handle FCM token registration failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      299 |       .send({ token: 'eODL6-Yk3jg:APA91bE...' });
      300 |
    > 301 |     expect(res.status).toStrictEqual(500);
          |                        ^
      302 |   });
      303 | });
      304 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:301:24)

[2m[2025-10-29T06:01:49.177Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
FAIL tests/mocked/movie.mocked.test.ts
  Mocked: GET /movies/search - TMDB API Failure
    ✓ should handle TMDB API server error (14 ms)
    ✓ should handle TMDB API timeout (4 ms)
    ✕ should return empty array for no matching results (6 ms)
    ✓ should handle invalid TMDB API key (7 ms)
  Mocked: Movie Comparison and Addition - Database Failures
    ✓ should handle ranking creation database error (13 ms)
    ✕ should reject duplicate movie ranking (5 ms)
  Mocked: GET /movies/ranked - Database Query Failure
    ✕ should handle ranked movies query failure (3 ms)
  Mocked: DELETE /movies/ranked/:id - Database Errors
    ✓ should handle rank adjustment failure (4 ms)

  ● Mocked: GET /movies/search - TMDB API Failure › should return empty array for no matching results

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      75 |       .query({ query: 'xyz123nonexistent' });
      76 |
    > 77 |     expect(res.status).toStrictEqual(200);
         |                        ^
      78 |     expect(Array.isArray(res.body.results || res.body)).toBe(true);
      79 |   });
      80 |

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:77:24)

  ● Mocked: Movie Comparison and Addition - Database Failures › should reject duplicate movie ranking

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      153 |       });
      154 |
    > 155 |     expect(res.status).toStrictEqual(400);
          |                        ^
      156 |     findOneySpy.mockRestore();
      157 |   });
      158 | });

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:155:24)

  ● Mocked: GET /movies/ranked - Database Query Failure › should handle ranked movies query failure

    Database connection lost

      175 |   it('should handle ranked movies query failure', async () => {
      176 |     const findSpy = jest.spyOn(RankedMovie, 'find')
    > 177 |       .mockRejectedValueOnce(new Error('Database connection lost'));
          |                              ^
      178 |
      179 |     const res = await request(app)
      180 |       .get('/api/movies/ranked')

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:177:30)

FAIL tests/unmocked/allRecommendationRoutes.unmocked.test.ts (19.823 s)
  Comprehensive Recommendation Routes Tests
    ✓ should get recommendations with no ranked movies (37 ms)
    ✓ should get recommendations based on ranked movies (844 ms)
    ✓ should handle recommendations with minimal data (278 ms)
    ✓ should handle recommendations with many ranked movies (1141 ms)
    ✓ should get trending movie recommendations (77 ms)
    ✓ should handle trending without auth (4 ms)
    ✓ should incorporate friend rankings in recommendations (327 ms)
    ✓ should handle recommendation query parameters (222 ms)
    ✓ should reject unauthorized recommendation request (6 ms)
    ✓ should handle recommendations with different genres (453 ms)
    ✕ should handle recommendation errors gracefully (4 ms)

  ● Comprehensive Recommendation Routes Tests › should handle recommendation errors gracefully

    ValidationError: RankedMovie validation failed: movieId: Path `movieId` is required., title: Path `title` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3358:32)
      at node_modules/mongoose/lib/document.js:3119:17
      at node_modules/mongoose/lib/schemaType.js:1416:9

🌐 TMDB ➡️  GET  params={"query":"test","api_key":"***"}
🌐 TMDB ➡️  GET  params={"api_key":"***"}
🌐 TMDB ➡️  GET /test params={"api_key":"***"}
🌐 TMDB ➡️  GET /movie/123 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /test params={"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/123 200 100ms
🌐 TMDB ⬅️  GET /test 200 150ms
🌐 TMDB ⬅️  GET /test ERROR 50ms: Network Error
🌐 TMDB ⬅️  GET  ERROR: Network Error
FAIL tests/mocked/tmdbServices.mocked.test.ts
  TMDB Client Tests
    ✓ should create axios instance with correct baseURL (2 ms)
    ✓ should add API key to request params (1 ms)
    ✓ should use TMDB_KEY environment variable as fallback
    ✓ should handle request with no existing params (1 ms)
    ✕ should log outgoing request (1 ms)
    ✕ should redact API key in request logs (2 ms)
    ✕ should log successful response (2 ms)
    ✕ should calculate and log response time
    ✕ should log error response (1 ms)
    ✕ should handle error without config
  TMDB Tagline Service Tests
    ✓ should fetch tagline successfully (1 ms)
    ✓ should return cached tagline on cache hit (1 ms)
    ✓ should refetch after cache expires (1 ms)
    ✓ should search without year parameter (1 ms)
    ✓ should return null when no search results (1 ms)
    ✓ should return null when result has no ID
    ✓ should return null when movie has no tagline
    ✓ should return null when movie has empty tagline (2 ms)
    ✓ should return null on API error (1 ms)
    ✕ should treat titles as case-insensitive for caching (2 ms)
    ✓ should create different cache entries for same title with different years (2 ms)
    ✕ should handle year as string parameter (1 ms)
    ✓ should trim whitespace from title for cache key
    ✓ should include year in search query (1 ms)
    ✓ should send correct search parameters

  ● TMDB Client Tests › should log outgoing request

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "TMDB ➡️"

    Number of calls: 0

      140 |     getTmdbClient();
      141 |
    > 142 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      143 |       expect.stringContaining('TMDB ➡️')
      144 |     );
      145 |     expect(consoleLogSpy).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:142:27)

  ● TMDB Client Tests › should redact API key in request logs

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "***"

    Number of calls: 0

      167 |     getTmdbClient();
      168 |
    > 169 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      170 |       expect.stringContaining('***')
      171 |     );
      172 |     expect(consoleLogSpy).not.toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:169:27)

  ● TMDB Client Tests › should log successful response

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "TMDB ⬅️"

    Number of calls: 0

      201 |     responseInterceptor(mockResponse);
      202 |
    > 203 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      204 |       expect.stringContaining('TMDB ⬅️')
      205 |     );
      206 |     expect(consoleLogSpy).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:203:27)

  ● TMDB Client Tests › should calculate and log response time

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /\d+ms/

    Number of calls: 0

      235 |     responseInterceptor(mockResponse);
      236 |
    > 237 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      238 |       expect.stringMatching(/\d+ms/)
      239 |     );
      240 |   });

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:237:27)

  ● TMDB Client Tests › should log error response

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "ERROR"

    Number of calls: 0

      266 |     expect(() => errorInterceptor(mockError)).toThrow();
      267 |
    > 268 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      269 |       expect.stringContaining('ERROR')
      270 |     );
      271 |   });

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:268:27)

  ● TMDB Client Tests › should handle error without config

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      292 |
      293 |     expect(() => errorInterceptor(mockError)).toThrow();
    > 294 |     expect(consoleLogSpy).toHaveBeenCalled();
          |                           ^
      295 |   });
      296 | });
      297 |

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:294:27)

  ● TMDB Tagline Service Tests › should treat titles as case-insensitive for caching

    expect(received).toBe(expected) // Object.is equality

    Expected: "Cached"
    Received: "An amazing movie"

      519 |     const tagline = await fetchMovieTagline('TEST MOVIE', 2024);
      520 |
    > 521 |     expect(tagline).toBe('Cached');
          |                     ^
      522 |     expect(mockClient.get).toHaveBeenCalledTimes(2);
      523 |   });
      524 |

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:521:21)

  ● TMDB Tagline Service Tests › should handle year as string parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: "String year"
    Received: "New tagline"

      570 |     const tagline = await fetchMovieTagline('Movie', '2024');
      571 |
    > 572 |     expect(tagline).toBe('String year');
          |                     ^
      573 |   });
      574 |
      575 |   // Test Case 23: Trim whitespace from title

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:572:21)

[2m[2025-10-29T06:01:49.610Z][0m [36mINFO[0m Test info message
[2m[2025-10-29T06:01:49.624Z][0m [36mINFO[0m User logged in {
  "userId": "123",
  "email": "test@example.com"
}
[2m[2025-10-29T06:01:49.626Z][0m [36mINFO[0m Multiple args arg1 123 true
[2m[2025-10-29T06:01:49.627Z][0m [32mSUCCESS[0m Operation completed
[2m[2025-10-29T06:01:49.628Z][0m [32mSUCCESS[0m Movie ranked {
  "movieId": 550,
  "rank": 1
}
[2m[2025-10-29T06:01:49.628Z][0m [33mWARN[0m API rate limit approaching
[2m[2025-10-29T06:01:49.629Z][0m [33mWARN[0m Slow query detected {
  "duration": 5000,
  "query": "complex query"
}
[2m[2025-10-29T06:01:49.630Z][0m [31mERROR[0m Database connection failed
[2m[2025-10-29T06:01:49.631Z][0m [31mERROR[0m Unexpected error {
  "error": "Something went wrong",
  "stack": "stack trace"
}
[2m[2025-10-29T06:01:49.632Z][0m [35mDEBUG[0m Debug information
[2m[2025-10-29T06:01:49.634Z][0m [35mDEBUG[0m State dump {
  "user": {
    "id": 1,
    "name": "Test"
  },
  "session": {
    "active": true
  }
}
[2m[2025-10-29T06:01:49.634Z][0m [1m[34mGET[0m /api/movies [32m200[0m [2m(45ms)[0m
[2m[2025-10-29T06:01:49.636Z][0m [1m[34mPOST[0m /api/auth/signin [32m[0m
[2m[2025-10-29T06:01:49.639Z][0m [1m[34mDELETE[0m /api/friends/123 [32m204[0m
[2m[2025-10-29T06:01:49.639Z][0m [1m[34mGET[0m /api/users [32m200[0m [2m(10ms)[0m
[2m[2025-10-29T06:01:49.639Z][0m [1m[34mPOST[0m /api/movies [31m404[0m [2m(20ms)[0m
[2m[2025-10-29T06:01:49.639Z][0m [1m[34mGET[0m /api/recommendations [31m500[0m [2m(100ms)[0m
[2m[2025-10-29T06:01:49.640Z][0m [1m[34mPUT[0m /api/profile [32m200[0m
[2m[2025-10-29T06:01:49.640Z][0m [1m[34mPATCH[0m /api/movies/123 [32m200[0m
[2m[2025-10-29T06:01:49.640Z][0m [1m[34mHEAD[0m /api/health [32m200[0m
[2m[2025-10-29T06:01:49.640Z][0m [36mINFO[0m Test message
[2m[2025-10-29T06:01:49.641Z][0m [36mINFO[0m Message string arg
[2m[2025-10-29T06:01:49.641Z][0m [36mINFO[0m Message 42 3.14
[2m[2025-10-29T06:01:49.641Z][0m [36mINFO[0m Message true false
[2m[2025-10-29T06:01:49.641Z][0m [36mINFO[0m Message {
  "key": "value",
  "nested": {
    "data": 123
  }
}
[2m[2025-10-29T06:01:49.641Z][0m [36mINFO[0m Message [
  1,
  2,
  3
]
[2m[2025-10-29T06:01:49.642Z][0m [36mINFO[0m Message null undefined
[2m[2025-10-29T06:01:49.642Z][0m [36mINFO[0m Message {}
[2m[2025-10-29T06:01:49.642Z][0m [36mINFO[0m Message []
[2m[2025-10-29T06:01:49.643Z][0m [36mINFO[0m Message 1
[2m[2025-10-29T06:01:49.643Z][0m [32mSUCCESS[0m Message 2
[2m[2025-10-29T06:01:49.643Z][0m [33mWARN[0m Message 3
[2m[2025-10-29T06:01:49.643Z][0m [31mERROR[0m Message 4
[2m[2025-10-29T06:01:49.643Z][0m [36mINFO[0m Complex data {
  "user": {
    "id": 123,
    "profile": {
      "name": "Test User",
      "preferences": {
        "theme": "dark",
        "notifications": true
      }
    }
  },
  "timestamp": "2025-10-29T06:01:49.643Z"
}
FAIL tests/unmocked/userProfile.unmocked.test.ts (20.242 s)
  Unmocked: PUT /users/profile
    ✕ should update user profile name (538 ms)
    ✕ should update user profile image (8 ms)
    ✕ should update multiple profile fields (10 ms)
    ✓ should reject empty name (4 ms)
    ✓ should reject whitespace-only name (6 ms)
    ✓ should reject unauthenticated profile update (6 ms)
    ✓ should reject invalid token (2 ms)
  Unmocked: POST /users/fcm-token
    ✓ should register FCM token (146 ms)
    ✓ should update existing FCM token (11 ms)
    ✓ should reject missing FCM token (11 ms)
    ✓ should reject empty FCM token (3 ms)
    ✓ should reject unauthenticated FCM token registration (1 ms)
  Unmocked: GET /users/profile/:userId
    ✕ should get user profile by ID (15 ms)
    ✕ should get own profile (4 ms)
    ✓ should return 404 for non-existent user (2 ms)
    ✕ should reject invalid user ID format (3 ms)
    ✕ should reject unauthenticated profile request (3 ms)

  ● Unmocked: PUT /users/profile › should update user profile name

    TypeError: Cannot read properties of undefined (reading 'name')

      47 |
      48 |     expect(res.status).toStrictEqual(200);
    > 49 |     expect(res.body.user.name).toStrictEqual(newName);
         |                          ^
      50 |
      51 |     const updatedUser = await User.findById(user._id);
      52 |     expect(updatedUser!.name).toStrictEqual(newName);

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:49:26)

  ● Unmocked: PUT /users/profile › should update user profile image

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      64 |       .send({ profileImageUrl: newImageUrl });
      65 |
    > 66 |     expect(res.status).toStrictEqual(200);
         |                        ^
      67 |     expect(res.body.user.profileImageUrl).toStrictEqual(newImageUrl);
      68 |
      69 |     const updatedUser = await User.findById(user._id);

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:66:24)

  ● Unmocked: PUT /users/profile › should update multiple profile fields

    TypeError: Cannot read properties of undefined (reading 'name')

      88 |
      89 |     expect(res.status).toStrictEqual(200);
    > 90 |     expect(res.body.user.name).toStrictEqual(newName);
         |                          ^
      91 |     expect(res.body.user.profileImageUrl).toStrictEqual(newImageUrl);
      92 |   });
      93 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:90:26)

  ● Unmocked: GET /users/profile/:userId › should get user profile by ID

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      283 |       .set('Authorization', `Bearer ${token}`);
      284 |
    > 285 |     expect(res.status).toStrictEqual(200);
          |                        ^
      286 |     expect(res.body.user).toBeDefined();
      287 |     expect(res.body.user.email).toStrictEqual(otherUser.email);
      288 |   });

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:285:24)

  ● Unmocked: GET /users/profile/:userId › should get own profile

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      297 |       .set('Authorization', `Bearer ${token}`);
      298 |
    > 299 |     expect(res.status).toStrictEqual(200);
          |                        ^
      300 |     expect(res.body.user.email).toStrictEqual(user.email);
      301 |   });
      302 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:299:24)

  ● Unmocked: GET /users/profile/:userId › should reject invalid user ID format

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      323 |       .set('Authorization', `Bearer ${token}`);
      324 |
    > 325 |     expect(res.status).toStrictEqual(400);
          |                        ^
      326 |   });
      327 |
      328 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:325:24)

  ● Unmocked: GET /users/profile/:userId › should reject unauthenticated profile request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      334 |       .get(`/api/users/profile/${otherUser._id}`);
      335 |
    > 336 |     expect(res.status).toStrictEqual(401);
          |                        ^
      337 |   });
      338 | });
      339 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:336:24)

FAIL tests/unit/logger.unit.test.ts
  Logger Utility
    info
      ✕ should log info message (2 ms)
      ✕ should log info message with arguments (1 ms)
      ✕ should handle multiple arguments
    success
      ✕ should log success message (1 ms)
      ✕ should log success with object data
    warn
      ✕ should log warning message (1 ms)
      ✕ should log warning with details
    error
      ✕ should log error message (1 ms)
      ✕ should log error with error object
    debug
      ✕ should log debug message in development mode (1 ms)
      ✓ should NOT log debug message in production mode
      ✓ should NOT log debug message when NODE_ENV is test (1 ms)
      ✕ should log debug with detailed data in development
    http
      ✕ should log HTTP request with all parameters (1 ms)
      ✕ should log HTTP request without status code (2 ms)
      ✕ should log HTTP request without duration (1 ms)
      ✕ should handle successful status codes (200-399)
      ✕ should handle error status codes (400+)
      ✕ should handle server error status codes (500+)
      ✕ should handle various HTTP methods
    Timestamp formatting
      ✕ should include ISO timestamp in all log messages
    Argument formatting
      ✕ should format string arguments (1 ms)
      ✕ should format number arguments
      ✕ should format boolean arguments
      ✕ should format object arguments as JSON
      ✕ should format array arguments (1 ms)
      ✕ should handle null and undefined arguments
      ✕ should handle empty object
      ✕ should handle empty array
    Integration scenarios
      ✕ should handle rapid sequential log calls
      ✕ should handle complex nested objects

  ● Logger Utility › info › should log info message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      23 |       logger.info('Test info message');
      24 |
    > 25 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      26 |       const call = consoleLogSpy.mock.calls[0][0];
      27 |       expect(call).toContain('INFO');
      28 |       expect(call).toContain('Test info message');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:25:29)

  ● Logger Utility › info › should log info message with arguments

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      32 |       logger.info('User logged in', { userId: '123', email: 'test@example.com' });
      33 |
    > 34 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      35 |       const call = consoleLogSpy.mock.calls[0][0];
      36 |       expect(call).toContain('INFO');
      37 |       expect(call).toContain('User logged in');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:34:29)

  ● Logger Utility › info › should handle multiple arguments

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      43 |       logger.info('Multiple args', 'arg1', 123, true);
      44 |
    > 45 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      46 |       const call = consoleLogSpy.mock.calls[0][0];
      47 |       expect(call).toContain('arg1');
      48 |       expect(call).toContain('123');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:45:29)

  ● Logger Utility › success › should log success message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      55 |       logger.success('Operation completed');
      56 |
    > 57 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      58 |       const call = consoleLogSpy.mock.calls[0][0];
      59 |       expect(call).toContain('SUCCESS');
      60 |       expect(call).toContain('Operation completed');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:57:29)

  ● Logger Utility › success › should log success with object data

    TypeError: Cannot read properties of undefined (reading '0')

      64 |       logger.success('Movie ranked', { movieId: 550, rank: 1 });
      65 |
    > 66 |       const call = consoleLogSpy.mock.calls[0][0];
         |                                               ^
      67 |       expect(call).toContain('SUCCESS');
      68 |       expect(call).toContain('Movie ranked');
      69 |       expect(call).toContain('movieId');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:66:47)

  ● Logger Utility › warn › should log warning message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      75 |       logger.warn('API rate limit approaching');
      76 |
    > 77 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      78 |       const call = consoleLogSpy.mock.calls[0][0];
      79 |       expect(call).toContain('WARN');
      80 |       expect(call).toContain('API rate limit approaching');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:77:29)

  ● Logger Utility › warn › should log warning with details

    TypeError: Cannot read properties of undefined (reading '0')

      84 |       logger.warn('Slow query detected', { duration: 5000, query: 'complex query' });
      85 |
    > 86 |       const call = consoleLogSpy.mock.calls[0][0];
         |                                               ^
      87 |       expect(call).toContain('WARN');
      88 |       expect(call).toContain('Slow query detected');
      89 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:86:47)

  ● Logger Utility › error › should log error message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      94 |       logger.error('Database connection failed');
      95 |
    > 96 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      97 |       const call = consoleLogSpy.mock.calls[0][0];
      98 |       expect(call).toContain('ERROR');
      99 |       expect(call).toContain('Database connection failed');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:96:29)

  ● Logger Utility › error › should log error with error object

    TypeError: Cannot read properties of undefined (reading '0')

      104 |       logger.error('Unexpected error', { error: error.message, stack: 'stack trace' });
      105 |
    > 106 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      107 |       expect(call).toContain('ERROR');
      108 |       expect(call).toContain('Unexpected error');
      109 |       expect(call).toContain('Something went wrong');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:106:47)

  ● Logger Utility › debug › should log debug message in development mode

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      117 |       logger.debug('Debug information');
      118 |
    > 119 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      120 |       const call = consoleLogSpy.mock.calls[0][0];
      121 |       expect(call).toContain('DEBUG');
      122 |       expect(call).toContain('Debug information');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:119:29)

  ● Logger Utility › debug › should log debug with detailed data in development

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      147 |       });
      148 |
    > 149 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      150 |       const call = consoleLogSpy.mock.calls[0][0];
      151 |       expect(call).toContain('DEBUG');
      152 |       expect(call).toContain('State dump');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:149:29)

  ● Logger Utility › http › should log HTTP request with all parameters

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      158 |       logger.http('GET', '/api/movies', 200, 45);
      159 |
    > 160 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      161 |       const call = consoleLogSpy.mock.calls[0][0];
      162 |       expect(call).toContain('GET');
      163 |       expect(call).toContain('/api/movies');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:160:29)

  ● Logger Utility › http › should log HTTP request without status code

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      169 |       logger.http('POST', '/api/auth/signin');
      170 |
    > 171 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      172 |       const call = consoleLogSpy.mock.calls[0][0];
      173 |       expect(call).toContain('POST');
      174 |       expect(call).toContain('/api/auth/signin');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:171:29)

  ● Logger Utility › http › should log HTTP request without duration

    TypeError: Cannot read properties of undefined (reading '0')

      178 |       logger.http('DELETE', '/api/friends/123', 204);
      179 |
    > 180 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      181 |       expect(call).toContain('DELETE');
      182 |       expect(call).toContain('/api/friends/123');
      183 |       expect(call).toContain('204');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:180:47)

  ● Logger Utility › http › should handle successful status codes (200-399)

    TypeError: Cannot read properties of undefined (reading '0')

      187 |       logger.http('GET', '/api/users', 200, 10);
      188 |
    > 189 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      190 |       expect(call).toContain('200');
      191 |     });
      192 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:189:47)

  ● Logger Utility › http › should handle error status codes (400+)

    TypeError: Cannot read properties of undefined (reading '0')

      194 |       logger.http('POST', '/api/movies', 404, 20);
      195 |
    > 196 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      197 |       expect(call).toContain('404');
      198 |     });
      199 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:196:47)

  ● Logger Utility › http › should handle server error status codes (500+)

    TypeError: Cannot read properties of undefined (reading '0')

      201 |       logger.http('GET', '/api/recommendations', 500, 100);
      202 |
    > 203 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      204 |       expect(call).toContain('500');
      205 |       expect(call).toContain('100ms');
      206 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:203:47)

  ● Logger Utility › http › should handle various HTTP methods

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 3
    Received number of calls: 0

      211 |       logger.http('HEAD', '/api/health', 200);
      212 |
    > 213 |       expect(consoleLogSpy).toHaveBeenCalledTimes(3);
          |                             ^
      214 |       expect(consoleLogSpy.mock.calls[0][0]).toContain('PUT');
      215 |       expect(consoleLogSpy.mock.calls[1][0]).toContain('PATCH');
      216 |       expect(consoleLogSpy.mock.calls[2][0]).toContain('HEAD');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:213:29)

  ● Logger Utility › Timestamp formatting › should include ISO timestamp in all log messages

    TypeError: Cannot read properties of undefined (reading '0')

      222 |       logger.info('Test message');
      223 |
    > 224 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      225 |       // ISO format: YYYY-MM-DDTHH:mm:ss.sssZ
      226 |       expect(call).toMatch(/\[\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z\]/);
      227 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:224:47)

  ● Logger Utility › Argument formatting › should format string arguments

    TypeError: Cannot read properties of undefined (reading '0')

      232 |       logger.info('Message', 'string arg');
      233 |
    > 234 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      235 |       expect(call).toContain('string arg');
      236 |     });
      237 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:234:47)

  ● Logger Utility › Argument formatting › should format number arguments

    TypeError: Cannot read properties of undefined (reading '0')

      239 |       logger.info('Message', 42, 3.14);
      240 |
    > 241 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      242 |       expect(call).toContain('42');
      243 |       expect(call).toContain('3.14');
      244 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:241:47)

  ● Logger Utility › Argument formatting › should format boolean arguments

    TypeError: Cannot read properties of undefined (reading '0')

      247 |       logger.info('Message', true, false);
      248 |
    > 249 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      250 |       expect(call).toContain('true');
      251 |       expect(call).toContain('false');
      252 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:249:47)

  ● Logger Utility › Argument formatting › should format object arguments as JSON

    TypeError: Cannot read properties of undefined (reading '0')

      255 |       logger.info('Message', { key: 'value', nested: { data: 123 } });
      256 |
    > 257 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      258 |       expect(call).toContain('"key"');
      259 |       expect(call).toContain('"value"');
      260 |       expect(call).toContain('"nested"');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:257:47)

  ● Logger Utility › Argument formatting › should format array arguments

    TypeError: Cannot read properties of undefined (reading '0')

      264 |       logger.info('Message', [1, 2, 3]);
      265 |
    > 266 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      267 |       expect(call).toContain('[');
      268 |       expect(call).toContain('1');
      269 |       expect(call).toContain('2');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:266:47)

  ● Logger Utility › Argument formatting › should handle null and undefined arguments

    TypeError: Cannot read properties of undefined (reading '0')

      274 |       logger.info('Message', null, undefined);
      275 |
    > 276 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      277 |       expect(call).toContain('null');
      278 |       expect(call).toContain('undefined');
      279 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:276:47)

  ● Logger Utility › Argument formatting › should handle empty object

    TypeError: Cannot read properties of undefined (reading '0')

      282 |       logger.info('Message', {});
      283 |
    > 284 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      285 |       expect(call).toContain('{}');
      286 |     });
      287 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:284:47)

  ● Logger Utility › Argument formatting › should handle empty array

    TypeError: Cannot read properties of undefined (reading '0')

      289 |       logger.info('Message', []);
      290 |
    > 291 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      292 |       expect(call).toContain('[]');
      293 |     });
      294 |   });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:291:47)

  ● Logger Utility › Integration scenarios › should handle rapid sequential log calls

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 4
    Received number of calls: 0

      301 |       logger.error('Message 4');
      302 |
    > 303 |       expect(consoleLogSpy).toHaveBeenCalledTimes(4);
          |                             ^
      304 |     });
      305 |
      306 |     it('should handle complex nested objects', () => {

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:303:29)

  ● Logger Utility › Integration scenarios › should handle complex nested objects

    TypeError: Cannot read properties of undefined (reading '0')

      321 |       logger.info('Complex data', complexObject);
      322 |
    > 323 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      324 |       expect(call).toContain('Complex data');
      325 |       expect(call).toContain('user');
      326 |       expect(call).toContain('profile');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:323:47)

FAIL tests/unmocked/movieComparison.unmocked.test.ts (20.457 s)
  Unmocked: POST /movies/rank
    ✓ should add first movie without comparison (289 ms)
    ✓ should start comparison for second movie (24 ms)
    ✓ should reject duplicate movie (14 ms)
    ✕ should reject missing required fields (14 ms)
    ✓ should reject unauthenticated rank request (23 ms)
    ✓ should remove movie from watchlist when ranked (101 ms)
  Unmocked: POST /movies/compare
    ✓ should process comparison choice (21 ms)
    ✕ should reject comparison without preferredMovieId (8 ms)
    ✕ should reject comparison without active session (102 ms)
    ✓ should reject unauthenticated compare request (13 ms)

  ● Unmocked: POST /movies/rank › should reject missing required fields

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      150 |       });
      151 |
    > 152 |     expect(res.status).toStrictEqual(400);
          |                        ^
      153 |   });
      154 |
      155 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:152:24)

  ● Unmocked: POST /movies/compare › should reject comparison without preferredMovieId

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      300 |       .send({});
      301 |
    > 302 |     expect(res.status).toStrictEqual(400);
          |                        ^
      303 |   });
      304 |
      305 |   // Input: No active comparison session

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:302:24)

  ● Unmocked: POST /movies/compare › should reject comparison without active session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 200

      315 |       });
      316 |
    > 317 |     expect(res.status).toStrictEqual(400);
          |                        ^
      318 |   });
      319 |
      320 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:317:24)

FAIL tests/unmocked/auth.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m42[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m42[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m
    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m64[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m64[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m
    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m80[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m80[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m

FAIL tests/unmocked/watchlistOperations.unmocked.test.ts (21.262 s)
  Unmocked: POST /watchlist - Additional Tests
    ✕ should add movie to watchlist with all fields (211 ms)
    ✓ should add movie with only required fields (95 ms)
    ✕ should reject duplicate movie in watchlist (15 ms)
    ✓ should reject missing movieId (8 ms)
    ✓ should reject missing title (5 ms)
    ✕ should reject missing year (85 ms)
    ✕ should reject missing posterUrl (84 ms)
    ✓ should reject unauthenticated watchlist addition (5 ms)
    ✓ should add multiple movies to watchlist (316 ms)
  Unmocked: DELETE /watchlist/:movieId - Additional Tests
    ✕ should delete movie from watchlist (17 ms)
    ✓ should return 404 for non-existent movie (8 ms)
    ✕ should delete only specified movie from watchlist (13 ms)
    ✕ should reject unauthenticated delete request (4 ms)
    ✕ should handle invalid movieId format (14 ms)
  Unmocked: GET /watchlist - Additional Tests
    ✕ should get multiple watchlist items (51 ms)
    ✕ should return only authenticated user watchlist (29 ms)
    ✕ should return empty array for empty watchlist (27 ms)
    ✓ should reject unauthenticated get watchlist request (11 ms)
    ✕ should return complete movie details in watchlist (20 ms)

  ● Unmocked: POST /watchlist - Additional Tests › should add movie to watchlist with all fields

    expect(received).toBeDefined()

    Received: undefined

      61 |     expect(res.status).toStrictEqual(201);
      62 |     expect(res.body.success).toStrictEqual(true);
    > 63 |     expect(res.body.watchlistItem).toBeDefined();
         |                                    ^
      64 |     expect(res.body.watchlistItem.movieId).toStrictEqual(mockMovies.inception.id);
      65 |
      66 |     const watchlistItem = await WatchlistItem.findOne({

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:63:36)

  ● Unmocked: POST /watchlist - Additional Tests › should reject duplicate movie in watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      119 |       });
      120 |
    > 121 |     expect(res.status).toStrictEqual(400);
          |                        ^
      122 |     expect(res.body.message).toMatch(/already|watchlist/i);
      123 |   });
      124 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:121:24)

  ● Unmocked: POST /watchlist - Additional Tests › should reject missing year

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 201

      171 |       });
      172 |
    > 173 |     expect(res.status).toStrictEqual(400);
          |                        ^
      174 |   });
      175 |
      176 |   // Input: Missing posterUrl

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:173:24)

  ● Unmocked: POST /watchlist - Additional Tests › should reject missing posterUrl

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 201

      188 |       });
      189 |
    > 190 |     expect(res.status).toStrictEqual(400);
          |                        ^
      191 |   });
      192 |
      193 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:190:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should delete movie from watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      296 |       .set('Authorization', `Bearer ${token}`);
      297 |
    > 298 |     expect(res.status).toStrictEqual(200);
          |                        ^
      299 |     expect(res.body.success).toStrictEqual(true);
      300 |
      301 |     const watchlistItem = await WatchlistItem.findOne({

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:298:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should delete only specified movie from watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      343 |       .set('Authorization', `Bearer ${token}`);
      344 |
    > 345 |     expect(res.status).toStrictEqual(200);
          |                        ^
      346 |
      347 |     const deletedItem = await WatchlistItem.findOne({
      348 |       userId: user._id,

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:345:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should reject unauthenticated delete request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      366 |       .delete(`/api/watchlist/${mockMovies.inception.id}`);
      367 |
    > 368 |     expect(res.status).toStrictEqual(401);
          |                        ^
      369 |   });
      370 |
      371 |   // Input: Invalid movieId format

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:368:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should handle invalid movieId format

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 404]

      378 |       .set('Authorization', `Bearer ${token}`);
      379 |
    > 380 |     expect([400, 404]).toContain(res.status);
          |                        ^
      381 |   });
      382 | });
      383 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:380:24)

  ● Unmocked: GET /watchlist - Additional Tests › should get multiple watchlist items

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      443 |
      444 |     expect(res.status).toStrictEqual(200);
    > 445 |     expect(Array.isArray(res.body.watchlist || res.body)).toBe(true);
          |                                                           ^
      446 |     const watchlist = res.body.watchlist || res.body;
      447 |     expect(watchlist.length).toStrictEqual(2);
      448 |   });

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:445:59)

  ● Unmocked: GET /watchlist - Additional Tests › should return only authenticated user watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 1
    Received: undefined

      475 |     expect(res.status).toStrictEqual(200);
      476 |     const watchlist = res.body.watchlist || res.body;
    > 477 |     expect(watchlist.length).toStrictEqual(1);
          |                              ^
      478 |     expect(watchlist[0].movieId).toStrictEqual(mockMovies.inception.id);
      479 |   });
      480 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:477:30)

  ● Unmocked: GET /watchlist - Additional Tests › should return empty array for empty watchlist

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      490 |     expect(res.status).toStrictEqual(200);
      491 |     const watchlist = res.body.watchlist || res.body;
    > 492 |     expect(Array.isArray(watchlist)).toBe(true);
          |                                      ^
      493 |     expect(watchlist.length).toStrictEqual(0);
      494 |   });
      495 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:492:38)

  ● Unmocked: GET /watchlist - Additional Tests › should return complete movie details in watchlist

    TypeError: Cannot read properties of undefined (reading 'title')

      527 |     expect(res.status).toStrictEqual(200);
      528 |     const watchlist = res.body.watchlist || res.body;
    > 529 |     expect(watchlist[0].title).toStrictEqual(mockMovies.inception.title);
          |                         ^
      530 |     expect(watchlist[0].year).toStrictEqual(mockMovies.inception.year);
      531 |     expect(watchlist[0].rating).toStrictEqual(mockMovies.inception.rating);
      532 |   });

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:529:25)

FAIL tests/unmocked/quote.unmocked.test.ts
  Unmocked: GET /quotes
    ✕ should return quote for movie (14 ms)
    ✕ should return fallback quote for unknown movie (6 ms)
    ✕ should reject unauthenticated quote request (4 ms)
    ✕ should reject quote request without title (8 ms)

  ● Unmocked: GET /quotes › should return quote for movie

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      45 |       .query({ title: 'Inception' });
      46 |
    > 47 |     expect(res.status).toStrictEqual(200);
         |                        ^
      48 |     expect(res.body).toHaveProperty('quote');
      49 |   });
      50 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:47:24)

  ● Unmocked: GET /quotes › should return fallback quote for unknown movie

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      59 |       .query({ title: 'NonexistentMoviexyz123' });
      60 |
    > 61 |     expect(res.status).toStrictEqual(200);
         |                        ^
      62 |     expect(res.body).toHaveProperty('quote');
      63 |   });
      64 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:61:24)

  ● Unmocked: GET /quotes › should reject unauthenticated quote request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      72 |       .query({ title: 'Inception' });
      73 |
    > 74 |     expect(res.status).toStrictEqual(401);
         |                        ^
      75 |   });
      76 |
      77 |   // Input: Missing title query parameter

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:74:24)

  ● Unmocked: GET /quotes › should reject quote request without title

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      84 |       .set('Authorization', `Bearer ${token}`);
      85 |
    > 86 |     expect(res.status).toStrictEqual(400);
         |                        ^
      87 |   });
      88 | });
      89 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:86:24)

FAIL tests/mocked/friendRoutes.mocked.test.ts
  Friend Routes - Mocked Error Tests
    GET / (friends list) error handling
      ✓ should handle database error gracefully (806 ms)
    GET /requests error handling
      ✓ should handle database error gracefully (15 ms)
    GET /requests/detailed error handling
      ✓ should handle database error gracefully (14 ms)
    GET /requests/outgoing error handling
      ✓ should handle database error gracefully (13 ms)
    GET /requests/outgoing/detailed error handling
      ✓ should handle database error gracefully (13 ms)
    POST /request error handling
      ✓ should return 401 when authenticated user not found in database (23 ms)
      ✓ should handle database error when creating friend request (69 ms)
      ✕ should handle notification service failure gracefully (46 ms)
    POST /respond error handling
      ✓ should handle database error when finding friend request (23 ms)
      ✓ should handle database error when creating friendships (40 ms)
      ✓ should handle notification failure when accepting request (187 ms)
    DELETE /:friendId error handling
      ✓ should handle database error gracefully (18 ms)
      ✓ should return 404 when friendship not found (15 ms)
    Additional edge cases
      ✓ should handle missing accept field in respond request (17 ms)
      ✓ should handle missing requestId field in respond request (14 ms)
      ✓ should reject friend request when user not found (23 ms)
      ✓ should reject responding to non-existent friend request (22 ms)
      ✓ should reject responding to request not directed to user (38 ms)

  ● Friend Routes - Mocked Error Tests › POST /request error handling › should handle notification service failure gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      194 |
      195 |       // Should still succeed even if notification fails
    > 196 |       expect(res.status).toBe(200);
          |                          ^
      197 |       expect(res.body.success).toBe(true);
      198 |     });
      199 |   });

      at Object.<anonymous> (tests/mocked/friendRoutes.mocked.test.ts:196:26)

FAIL tests/unmocked/friendRoutesAdvanced.unmocked.test.ts
  Advanced Friend Routes Tests
    ✓ should send friend request using email (28 ms)
    ✓ should create bilateral friendship on accept (50 ms)
    ✕ should remove bilateral friendships on delete (31 ms)
    ✓ should reject friend request with accept=false (36 ms)
    ✓ should reject friend request to self (25 ms)
    ✓ should reject duplicate friend request (35 ms)
    ✓ should handle reverse pending request (25 ms)
    ✓ should get all friends with populated data (47 ms)
    ✓ should get pending requests with sender populated (12 ms)
    ✓ should get detailed pending requests (24 ms)
    ✓ should get outgoing friend requests (32 ms)
    ✓ should get detailed outgoing friend requests (29 ms)
    ✓ should handle request to non-existent email (9 ms)
    ✓ should reject invalid email format (13 ms)
    ✓ should reject request without email (16 ms)
    ✓ should handle respond to non-existent request (13 ms)
    ✓ should reject respond to request for different receiver (14 ms)
    ✓ should reject respond to already accepted request (26 ms)
    ✓ should reject respond to already rejected request (120 ms)
    ✓ should handle delete of non-existent friendship (16 ms)
    ✓ should handle delete with invalid friendId format (21 ms)
    ✓ should reject unauthorized access to friends list (7 ms)
    ✓ should reject unauthorized access to pending requests (6 ms)
    ✓ should reject unauthorized friend request (9 ms)
    ✓ should reject unauthorized respond (28 ms)
    ✓ should reject unauthorized delete friendship (6 ms)
    ✓ should handle multiple rapid friend requests (21 ms)
    ✓ should reject request to existing friend (7 ms)
    ✓ should get empty friends list when no friends (10 ms)
    ✓ should get empty pending requests when none exist (25 ms)
    ✓ should get empty detailed requests when none exist (9 ms)
    ✓ should get empty outgoing requests when none exist (8 ms)
    ✓ should get empty detailed outgoing requests when none exist (9 ms)
    ✓ should handle respond with missing accept field (24 ms)
    ✓ should handle respond with missing requestId field (11 ms)
    ✓ should handle complex friendship network (36 ms)
    ✓ should prevent double acceptance of friend request (34 ms)
    ✓ should handle invalid requestId format in respond (26 ms)
    ✓ should only return pending requests, not accepted/rejected (21 ms)
    ✓ should only return outgoing requests from user (19 ms)

  ● Advanced Friend Routes Tests › should remove bilateral friendships on delete

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      114 |     const count2 = await Friendship.countDocuments({ userId: user2._id, friendId: user1._id });
      115 |
    > 116 |     expect(count1).toBe(0);
          |                    ^
      117 |     expect(count2).toBe(0);
      118 |   });
      119 |

      at Object.<anonymous> (tests/unmocked/friendRoutesAdvanced.unmocked.test.ts:116:20)

FAIL tests/unmocked/movie.unmocked.test.ts (22.287 s)
  Unmocked: GET /movies/search
    ✕ should return search results for valid movie query (196 ms)
    ✓ should reject search query shorter than 2 characters (11 ms)
    ✓ should reject empty search query (5 ms)
    ✓ should reject unauthenticated search (3 ms)
  Unmocked: GET /movies/ranked
    ✓ should return user ranked movies sorted by rank (29 ms)
    ✓ should return empty array for user with no ranked movies (11 ms)
    ✓ should reject unauthenticated ranked movies request (5 ms)
  Unmocked: DELETE /movies/ranked/:id
    ✕ should delete ranked movie and adjust ranks (31 ms)
    ✓ should reject deletion of non-existent movie (19 ms)
    ✓ should reject deletion with invalid ID format (29 ms)

  ● Unmocked: GET /movies/search › should return search results for valid movie query

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      46 |       .query({ query: 'Inception' });
      47 |
    > 48 |     expect(res.status).toStrictEqual(200);
         |                        ^
      49 |     expect(Array.isArray(res.body.results || res.body)).toBe(true);
      50 |   });
      51 |

      at Object.<anonymous> (tests/unmocked/movie.unmocked.test.ts:48:24)

  ● Unmocked: DELETE /movies/ranked/:id › should delete ranked movie and adjust ranks

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      216 |       .set('Authorization', `Bearer ${token}`);
      217 |
    > 218 |     expect(res.status).toStrictEqual(200);
          |                        ^
      219 |
      220 |     // Verify movie is deleted
      221 |     const remaining = await RankedMovie.find({ userId: user._id });

      at Object.<anonymous> (tests/unmocked/movie.unmocked.test.ts:218:24)

[2m[2025-10-29T06:01:52.165Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 89ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.406Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
[2m[2025-10-29T06:01:52.445Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.518Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 77ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.597Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.688Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.763Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.838Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
FAIL tests/unmocked/friendOperations.unmocked.test.ts (23.393 s)
  Unmocked: POST /friends/request - Additional Tests
    ✓ should send friend request by email (58 ms)
    ✓ should reject friend request to self (16 ms)
    ✕ should reject duplicate friend request (20 ms)
    ✕ should reject request to existing friend (12 ms)
    ✓ should reject request without email (10 ms)
    ✓ should reject invalid email format (8 ms)
  Unmocked: POST /friends/respond - Additional Tests
    ✕ should accept friend request (13 ms)
    ✕ should reject friend request (10 ms)
    ✓ should reject invalid action (7 ms)
    ✕ should return 404 for non-existent request (19 ms)
    ✓ should reject missing requestId (8 ms)
    ✓ should reject missing action (30 ms)
  Unmocked: DELETE /friends/:friendId - Additional Tests
    ✕ should remove friend (bidirectional) (21 ms)
    ✓ should return 404 for non-existent friend (17 ms)
    ✕ should reject invalid friend ID format (14 ms)
    ✕ should reject removing self (8 ms)
  Unmocked: GET /friends/search - Search Users
    ✕ should search users by email (14 ms)
    ✕ should search users by name (6 ms)
    ✕ should reject empty search query (6 ms)
    ✕ should return empty array for no matches (3 ms)

  ● Unmocked: POST /friends/request - Additional Tests › should reject duplicate friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      104 |       .send({ email: user2.email });
      105 |
    > 106 |     expect(res.status).toStrictEqual(400);
          |                        ^
      107 |     expect(res.body.message).toMatch(/already|pending/i);
      108 |   });
      109 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:106:24)

  ● Unmocked: POST /friends/request - Additional Tests › should reject request to existing friend

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      124 |       .send({ email: user2.email });
      125 |
    > 126 |     expect(res.status).toStrictEqual(400);
          |                        ^
      127 |     expect(res.body.message).toMatch(/already.*friend/i);
      128 |   });
      129 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:126:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should accept friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      209 |       });
      210 |
    > 211 |     expect(res.status).toStrictEqual(200);
          |                        ^
      212 |     expect(res.body.success).toStrictEqual(true);
      213 |
      214 |     const friendship = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:211:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should reject friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      241 |       });
      242 |
    > 243 |     expect(res.status).toStrictEqual(200);
          |                        ^
      244 |     expect(res.body.success).toStrictEqual(true);
      245 |
      246 |     const friendship = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:243:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should return 404 for non-existent request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 404
    Received: 400

      284 |       });
      285 |
    > 286 |     expect(res.status).toStrictEqual(404);
          |                        ^
      287 |   });
      288 |
      289 |   // Input: Missing requestId

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:286:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should remove friend (bidirectional)

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      369 |       .set('Authorization', `Bearer ${token1}`);
      370 |
    > 371 |     expect(res.status).toStrictEqual(200);
          |                        ^
      372 |     expect(res.body.success).toStrictEqual(true);
      373 |
      374 |     const friendship1 = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:371:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should reject invalid friend ID format

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      407 |       .set('Authorization', `Bearer ${token1}`);
      408 |
    > 409 |     expect(res.status).toStrictEqual(400);
          |                        ^
      410 |   });
      411 |
      412 |   // Input: Remove self as friend

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:409:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should reject removing self

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      419 |       .set('Authorization', `Bearer ${token1}`);
      420 |
    > 421 |     expect(res.status).toStrictEqual(400);
          |                        ^
      422 |   });
      423 | });
      424 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:421:24)

  ● Unmocked: GET /friends/search - Search Users › should search users by email

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      463 |       .query({ query: 'searchable' });
      464 |
    > 465 |     expect(res.status).toStrictEqual(200);
          |                        ^
      466 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      467 |   });
      468 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:465:24)

  ● Unmocked: GET /friends/search - Search Users › should search users by name

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      477 |       .query({ query: 'Searchable' });
      478 |
    > 479 |     expect(res.status).toStrictEqual(200);
          |                        ^
      480 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      481 |   });
      482 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:479:24)

  ● Unmocked: GET /friends/search - Search Users › should reject empty search query

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      491 |       .query({ query: '' });
      492 |
    > 493 |     expect(res.status).toStrictEqual(400);
          |                        ^
      494 |   });
      495 |
      496 |   // Input: Search with no matches

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:493:24)

  ● Unmocked: GET /friends/search - Search Users › should return empty array for no matches

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      504 |       .query({ query: 'nonexistentuser12345' });
      505 |
    > 506 |     expect(res.status).toStrictEqual(200);
          |                        ^
      507 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      508 |   });
      509 | });

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:506:24)

🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.912Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:52.986Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:53.021Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
🌐 TMDB ⬅️  GET /movie/278/similar ERROR 76ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.062Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
[2m[2025-10-29T06:01:53.125Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.137Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/recommendations ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.213Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.292Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100000 params={"language":"en-US","api_key":"***"}
FAIL tests/nfr/performance.test.ts (23.672 s)
  NFR: Performance - Response Time
    ✕ should respond to GET /movies/ranked within acceptable time (33 ms)
    ✕ should sign out user within acceptable time (21 ms)
    ✕ should limit feed results to prevent memory bloat (324 ms)
  NFR: Performance - Database Index Efficiency
    ✕ should efficiently fetch ranked movies using indexes (41 ms)
  NFR: Performance - Bulk Operations
    ✕ should complete cascade delete within acceptable time (222 ms)

  ● NFR: Performance - Response Time › should respond to GET /movies/ranked within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      60 |     const responseTime = Date.now() - startTime;
      61 |
    > 62 |     expect(res.status).toStrictEqual(200);
         |                        ^
      63 |     expect(responseTime).toBeLessThan(ACCEPTABLE_RESPONSE_TIME_MS);
      64 |   });
      65 |

      at Object.<anonymous> (tests/nfr/performance.test.ts:62:24)

  ● NFR: Performance - Response Time › should sign out user within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      75 |     const responseTime = Date.now() - startTime;
      76 |
    > 77 |     expect(res.status).toStrictEqual(200);
         |                        ^
      78 |     expect(responseTime).toBeLessThan(500);
      79 |   });
      80 |

      at Object.<anonymous> (tests/nfr/performance.test.ts:77:24)

  ● NFR: Performance - Response Time › should limit feed results to prevent memory bloat

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      117 |       .set('Authorization', `Bearer ${token}`);
      118 |
    > 119 |     expect(res.status).toStrictEqual(200);
          |                        ^
      120 |     expect(Array.isArray(res.body)).toBe(true);
      121 |     // Feed should limit results, verify it's not unbounded
      122 |     expect(res.body.length).toBeLessThanOrEqual(50);

      at Object.<anonymous> (tests/nfr/performance.test.ts:119:24)

  ● NFR: Performance - Database Index Efficiency › should efficiently fetch ranked movies using indexes

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      166 |     const queryTime = Date.now() - startTime;
      167 |
    > 168 |     expect(res.status).toStrictEqual(200);
          |                        ^
      169 |     expect(Array.isArray(res.body)).toBe(true);
      170 |     expect(res.body.length).toBe(100);
      171 |     // With proper indexing, 100 items should still be fast

      at Object.<anonymous> (tests/nfr/performance.test.ts:168:24)

  ● NFR: Performance - Bulk Operations › should complete cascade delete within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      236 |     const deleteTime = Date.now() - startTime;
      237 |
    > 238 |     expect(res.status).toStrictEqual(200);
          |                        ^
      239 |     expect(deleteTime).toBeLessThan(ACCEPTABLE_BULK_TIME_MS);
      240 |   });
      241 | });

      at Object.<anonymous> (tests/nfr/performance.test.ts:238:24)

🌐 TMDB ⬅️  GET /movie/100000 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.410Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100001 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.484Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100002 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.557Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100003 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.627Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100004 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.701Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100005 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100005 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.775Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100006 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100006 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.849Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100007 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.921Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 100007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100000/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:53.992Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100001/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.062Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100002/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.131Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100003/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:54.186Z][0m [32mSUCCESS[0m Firebase Admin initialized with service account
🌐 TMDB ⬅️  GET /movie/100003/similar ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.207Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100004/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.277Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100000/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.350Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100001/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.420Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/100002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/100002/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.493Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 100002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.593Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238 ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.668Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.736Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 89ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.809Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.884Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:54.959Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.032Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.104Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.177Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200000 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.268Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200001 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.342Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200002 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.413Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200003 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.485Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 134ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200004 ERROR 138ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.623Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200005 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 75ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/157336 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200005 ERROR 127ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.750Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200006 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/157336 ERROR 73ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
PASS tests/mocked/movieRoutes.mocked.test.ts (5.549 s)
  Movie Routes - Mocked Tests
    GET /search
      ✓ should search movies successfully (317 ms)
      ✓ should reject query shorter than 2 characters (265 ms)
      ✓ should search with includeCast parameter (61 ms)
      ✓ should handle Chinese characters and fallback to zh-CN (12 ms)
      ✓ should handle CJK search when detail fetch fails (169 ms)
      ✓ should handle empty results (12 ms)
      ✓ should handle TMDB API errors (9 ms)
      ✓ should return 500 when TMDB API key not configured (11 ms)
      ✓ should handle cast enrichment API failure (10 ms)
    GET /ranked
      ✓ should get ranked movies (25 ms)
      ✓ should return empty array when no ranked movies (171 ms)
      ✓ should handle database error gracefully (10 ms)
    POST /rank
      ✓ should rank movie successfully (34 ms)
      ✓ should enrich missing overview and poster from TMDB (20 ms)
      ✓ should create feed activity when ranking (29 ms)
      ✓ should handle TMDB enrichment failure gracefully (26 ms)
      ✓ should notify friends via SSE when ranking (32 ms)
      ✓ should handle database error gracefully (18 ms)
    DELETE /ranked/:id
      ✓ should delete ranked movie and resequence ranks (39 ms)
      ✓ should reject invalid ID format (12 ms)
      ✓ should return 404 for non-existent movie (14 ms)
      ✓ should delete related feed activities (26 ms)
      ✓ should handle database error gracefully (13 ms)
    GET /:movieId/providers
      ✓ should get watch providers successfully (13 ms)
      ✓ should use fallback link when no provider link (14 ms)
      ✓ should reject invalid movie ID (10 ms)
      ✓ should return 500 when TMDB API key not configured (9 ms)
      ✓ should handle TMDB API error gracefully (6 ms)
    GET /:movieId/details
      ✓ should get movie details with cast (7 ms)
      ✓ should reject invalid movie ID (6 ms)
      ✓ should return 500 when TMDB API key not configured (6 ms)
      ✓ should handle TMDB API error gracefully (8 ms)
    GET /:movieId/videos
      ✓ should get official trailer (7 ms)
      ✓ should fallback to non-official trailer (6 ms)
      ✓ should fallback to teaser when no trailer available (10 ms)
      ✓ should return null when no videos available (14 ms)
      ✓ should reject invalid movie ID (10 ms)
      ✓ should return 500 when TMDB API key not configured (17 ms)
      ✓ should handle TMDB API error gracefully (11 ms)

🌐 TMDB ⬅️  GET /movie/200006 ERROR 86ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.838Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 108ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
PASS tests/mocked/recommendationController.mocked.test.ts (5.036 s)
  Recommendation Controller - Mocked Tests
    GET /trending
      ✓ should return trending movies successfully (655 ms)
      ✓ should return empty array when no trending movies (148 ms)
      ✓ should return empty array when TMDB returns no data (13 ms)
      ✓ should limit results to 20 movies (12 ms)
      ✓ should handle null/undefined movie fields (10 ms)
      ✓ should handle TMDB API error (7 ms)
    GET /
      ✓ should return empty array when user has no ranked movies (9 ms)
      ✓ should analyze preferences and return recommendations (13 ms)
      ✓ should handle discover API failure gracefully (13 ms)
      ✓ should handle similar movies API failure gracefully (8 ms)
      ✓ should handle recommendations API failure gracefully (10 ms)
      ✓ should return empty array when all API sources fail (9 ms)
      ✓ should filter out already seen movies (11 ms)
      ✓ should deduplicate recommendations from multiple sources (10 ms)
      ✓ should score movies based on genre matching (8 ms)
      ✓ should handle preference analysis failures gracefully (9 ms)
      ✓ should limit final recommendations to 20 movies (9 ms)
      ✓ should handle database error gracefully (46 ms)
      ✓ should calculate top 50% of ranked movies for preferences (22 ms)
      ✓ should handle discover recommendations failure gracefully (13 ms)

🌐 TMDB ⬅️  GET /movie/200007 ERROR 143ms: Request failed with status code 401
[2m[2025-10-29T06:01:55.982Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200008 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 116ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200008 ERROR 95ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.077Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200009 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200009 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.151Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 200009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 129ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200000/similar ERROR 67ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.218Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 76ms: Request failed with status code 401
🌐 TMDB ➡️  GET /movie/157336 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200001/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.290Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200002/similar params={"language":"en-US","page":1,"api_key":"***"}
PASS tests/mocked/notificationService.mocked.test.ts
  Notification Service Tests - Mocked
    ✓ should send feed notification successfully (5 ms)
    ✓ should handle invalid registration token error (3 ms)
    ✓ should handle registration token not registered error (1 ms)
    ✓ should handle generic sending error (2 ms)
    ✓ should send friend request notification (3 ms)
    ✓ should send friend request accepted notification (2 ms)
    ✓ should send like notification (2 ms)
    ✓ should send comment notification (1 ms)
    ✓ should truncate long comments in notification (3 ms)
    ✓ should send multicast notification to multiple tokens (2 ms)
    ✓ should handle multicast with partial failures (2 ms)
    ✓ should handle multicast with empty token array (2 ms)
    ✓ should handle multicast network error (2 ms)
    ✓ should include Android configuration in feed notification (3 ms)
    ✓ should use normal priority for friend request accepted (1 ms)
    ✓ should handle invalid token error in sendLikeNotification (2 ms)
    ✓ should handle token not registered error in sendLikeNotification (1 ms)
    ✓ should handle generic error in sendLikeNotification (1 ms)
    ✓ should handle invalid token error in sendCommentNotification (1 ms)
    ✓ should handle token not registered error in sendCommentNotification (2 ms)
    ✓ should handle generic error in sendCommentNotification (1 ms)
    ✓ should handle errors in sendFriendRequestNotification (3 ms)
    ✓ should handle errors in sendFriendRequestAcceptedNotification (2 ms)
    ✓ should handle multicast with all failures (5 ms)
    ✓ should include data payload in multicast notification (3 ms)

🌐 TMDB ⬅️  GET /movie/157336 ERROR 73ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/200002/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.364Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ➡️  GET /movie/155 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/200003/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.434Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/155 ERROR 72ms: Request failed with status code 401
🌐 TMDB ⬅️  GET /movie/200004/similar ERROR 78ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.513Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200005/similar params={"language":"en-US","page":1,"api_key":"***"}
[2m[2025-10-29T06:01:56.531Z][0m [36mINFO[0m Closing all SSE connections...
[2m[2025-10-29T06:01:56.531Z][0m [32mSUCCESS[0m All SSE connections closed
[2m[2025-10-29T06:01:56.532Z][0m [36mINFO[0m Closing all SSE connections...
[2m[2025-10-29T06:01:56.532Z][0m [32mSUCCESS[0m All SSE connections closed
[2m[2025-10-29T06:01:56.532Z][0m [36mINFO[0m Closing all SSE connections...
[2m[2025-10-29T06:01:56.532Z][0m [32mSUCCESS[0m All SSE connections closed
[2m[2025-10-29T06:01:56.532Z][0m [36mINFO[0m Closing all SSE connections...
[2m[2025-10-29T06:01:56.533Z][0m [32mSUCCESS[0m All SSE connections closed
PASS tests/unmocked/sseService.unmocked.test.ts
  SSE Service Tests
    ✓ should add client for new user (1 ms)
    ✓ should add multiple clients for same user (1 ms)
    ✓ should add clients for different users
    ✓ should auto-remove client when connection closes
    ✓ should remove client manually
    ✓ should delete user entry when last client is removed (1 ms)
    ✓ should handle removing client from non-existent user
    ✓ should send event to existing client
    ✓ should handle sending to non-existent user
    ✓ should send event to all clients of same user (1 ms)
    ✓ should skip sending to closed connection
    ✓ should skip sending to destroyed connection
    ✓ should remove client when write throws error
    ✓ should remove only failed clients and keep working ones (2 ms)
    ✓ should clear all connections (1 ms)
    ✓ should handle clearing already-closed connections
    ✓ should handle clearing destroyed connections
    ✓ should handle errors during clear (1 ms)
    ✓ should serialize various data types correctly (1 ms)
    ✓ should format event name correctly
    ✓ should handle multiple sends to same client
    ✓ should handle complex nested data structures
    ✓ should handle concurrent add and remove operations (1 ms)
    ✓ should handle empty event name
    ✓ should handle special characters in data

🌐 TMDB ⬅️  GET /movie/200005/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.586Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200000/recommendations params={"page":1,"api_key":"***"}
[2m[2025-10-29T06:01:56.625Z][0m [36mINFO[0m Sign in attempt for email: test@example.com
[2m[2025-10-29T06:01:56.627Z][0m [36mINFO[0m Sign in attempt for email: test@example.com
[2m[2025-10-29T06:01:56.632Z][0m [36mINFO[0m Sign up attempt for email: existing@example.com
[2m[2025-10-29T06:01:56.632Z][0m [33mWARN[0m Sign up failed: user already exists for existing@example.com
[2m[2025-10-29T06:01:56.635Z][0m [36mINFO[0m Sign up attempt for email: newuser@example.com
🌐 TMDB ⬅️  GET /movie/200000/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.659Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200001/recommendations params={"page":1,"api_key":"***"}
PASS tests/mocked/auth.mocked.test.ts
  Mocked: POST /auth/signin
    ✓ should handle Google token verification error (8 ms)
    ✓ should handle database error during signin (3 ms)
    ✓ should handle JWT generation failure (2 ms)
    ✓ should successfully sign in with valid credentials (2 ms)
  Mocked: POST /auth/signup
    ✓ should handle database duplicate key error (3 ms)
    ✓ should handle database write failure (3 ms)
    ✓ should reject invalid Google token during signup (2 ms)
    ✓ should successfully sign up with valid credentials (2 ms)
  Mocked: POST /auth/signout
    ✓ should reject signout with tampered JWT (3 ms)
    ✓ should reject signout with expired token (6 ms)
  Mocked: DELETE /auth/account
    ✓ should handle cascading delete failure (5 ms)
    ✓ should reject deletion with invalid token signature (3 ms)

PASS tests/unit/comparisonSession.unit.test.ts
  Comparison Session Utility
    startSession
      ✓ should create a new session with correct initial values (2 ms)
      ✓ should overwrite existing session for same user (1 ms)
      ✓ should handle movie without posterPath
    getSession
      ✓ should return session for existing user
      ✓ should return undefined for non-existent user
    updateSession
      ✓ should update session low and high values (1 ms)
      ✓ should not affect newMovie when updating
      ✓ should handle updating to same values
      ✓ should handle non-existent session gracefully
      ✓ should return early when session does not exist
    endSession
      ✓ should delete existing session
      ✓ should handle deleting non-existent session gracefully
      ✓ should only delete specified user session
    Integration scenarios
      ✓ should handle complete comparison workflow
      ✓ should handle multiple concurrent users

🌐 TMDB ⬅️  GET /movie/200001/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.732Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200002/recommendations params={"page":1,"api_key":"***"}
PASS tests/mocked/authService.mocked.test.ts (5.929 s)
  AuthService - Mocked Tests
    ✓ should verify valid Google token successfully (21 ms)
    ✓ should throw error when token payload missing email (21 ms)
    ✓ should throw error when token payload missing sub (4 ms)
    ✓ should throw error when token payload is null (4 ms)
    ✓ should throw error when token verification fails (2 ms)
    ✓ should use email as name when name is missing (1 ms)
    ✓ should sign in existing user successfully (323 ms)
    ✓ should throw error when user not found (122 ms)
    ✓ should fail signin when Google token is invalid (1 ms)
    ✓ should create new user successfully (6 ms)
    ✓ should throw error when user already exists (4 ms)
    ✓ should fail signup when Google token is invalid (2 ms)
    ✓ should generate valid JWT token (2 ms)
    ✓ should generate unique tokens for different users (2 ms)
    ✓ should set token expiration to 30 days (3 ms)
    ✓ should handle signup without picture (4 ms)
    ✓ should return JWT token on successful signin (6 ms)
    ✓ should handle multiple signin attempts for same user (1007 ms)
    ✓ should create user with all Google profile fields (5 ms)
    ✓ should handle empty token string (1 ms)
    ✓ should use default secret when JWT_SECRET not provided (2 ms)
    ✓ should handle undefined fields in payload gracefully (2 ms)

🌐 TMDB ⬅️  GET /movie/200002/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.804Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/200003/recommendations params={"page":1,"api_key":"***"}
PASS tests/mocked/movieComparisionController.mocked.test.ts (6.782 s)
  Movie Comparison Controller - Mocked Tests
    POST /add
      Case 1: First movie (empty ranking)
        ✓ should add first movie without comparison (1181 ms)
        ✓ should remove from watchlist when adding first movie (114 ms)
        ✓ should enrich missing poster and overview from TMDB (16 ms)
        ✓ should create feed activity when adding first movie (15 ms)
        ✓ should notify friends via SSE when adding first movie (26 ms)
        ✓ should send FCM notification to friends with tokens (22 ms)
        ✓ should handle TMDB enrichment failure gracefully (18 ms)
        ✓ should handle FCM notification failure gracefully (20 ms)
      Case 2: Duplicate movie
        ✓ should reject duplicate movie (12 ms)
        ✓ should remove from watchlist even when rejecting duplicate (16 ms)
      Case 3: Begin comparison
        ✓ should start comparison session for second movie (12 ms)
        ✓ should remove from watchlist when starting comparison (14 ms)
        ✓ should use middle index for first comparison (17 ms)
      Error handling
        ✓ should handle database errors gracefully (7 ms)
    POST /compare
      ✓ should return error when no active session (12 ms)
      ✓ should continue comparison when not finished (17 ms)
      ✓ should insert movie when comparison finishes (prefer new) (53 ms)
      ✓ should insert movie at correct position (prefer existing) (35 ms)
      ✓ should remove from watchlist when finalizing insert (28 ms)
      ✓ should enrich with TMDB data when finalizing (23 ms)
      ✓ should create feed activity when finalizing (23 ms)
      ✓ should notify friends when finalizing (25 ms)
      ✓ should send FCM notification when finalizing (22 ms)
      ✓ should handle TMDB enrichment failure when finalizing (23 ms)
      ✓ should handle FCM notification failure when finalizing (24 ms)
      ✓ should handle database errors gracefully (13 ms)

🌐 TMDB ⬅️  GET /movie/200003/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:56.874Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 200003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300000 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.037Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300001 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.111Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300002 params={"language":"en-US","api_key":"***"}
PASS tests/unmocked/quoteRoutes.unmocked.test.ts
  Quote Routes - Unmocked Tests
    GET /
      ✓ should fetch tagline with title and year (401 ms)
      ✓ should fetch tagline with title only (148 ms)
      ✓ should reject request with missing title (5 ms)
      ✓ should reject request with empty title (4 ms)
      ✓ should return 404 when no tagline found (5 ms)
      ✓ should handle service errors gracefully (6 ms)
      ✓ should trim title whitespace (7 ms)
      ✓ should handle title with special characters (5 ms)
      ✓ should handle empty year parameter (6 ms)
      ✓ should require authentication (6 ms)

🌐 TMDB ⬅️  GET /movie/300002 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.185Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300003 params={"language":"en-US","api_key":"***"}
PASS tests/unmocked/friendRoutesDetailed.unmocked.test.ts (5.287 s)
  Friend Routes Detailed Endpoints
    ✓ should get detailed pending requests (40 ms)
    ✓ should get empty detailed pending requests (6 ms)
    ✓ should get multiple detailed pending requests (15 ms)
    ✓ should get outgoing friend requests (8 ms)
    ✓ should get empty outgoing requests (9 ms)
    ✓ should get multiple outgoing requests (7 ms)
    ✓ should get detailed outgoing requests (16 ms)
    ✓ should get empty detailed outgoing requests (15 ms)
    ✓ should get multiple detailed outgoing requests (13 ms)
    ✓ should handle multiple rapid friend requests (34 ms)
    ✓ should accept friend request with accept boolean (20 ms)
    ✓ should reject friend request with accept boolean (11 ms)
    ✓ should reject respond from non-receiver (8 ms)
    ✓ should reject respond to already accepted request (6 ms)
    ✓ should get friends list with population (16 ms)
    ✓ should reject unauthorized detailed requests (5 ms)
    ✓ should reject unauthorized outgoing requests (3 ms)
    ✓ should reject unauthorized outgoing detailed requests (3 ms)
    ✓ should handle reverse pending request scenario (13 ms)
    ✓ should create bilateral friendships on accept (23 ms)
    ✓ should handle delete with invalid friendId (5 ms)
    ✓ should validate email format in friend request (5 ms)
    ✓ should enforce rate limiting on friend requests (15 ms)

🌐 TMDB ⬅️  GET /movie/300003 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.258Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300004 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.329Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300005 params={"language":"en-US","api_key":"***"}
PASS tests/unmocked/rerankAdvanced.unmocked.test.ts (6.126 s)
  Advanced Rerank Controller Tests
    ✓ should rerank movie from middle to top position (1368 ms)
    ✓ should rerank movie from middle to bottom position (12 ms)
    ✓ should handle rerank with 10 movies (13 ms)
    ✓ should handle rerank with 20 movies (20 ms)
    ✓ should rerank movie from top position (8 ms)
    ✓ should rerank movie from bottom position (18 ms)
    ✓ should handle rerank with invalid format movieId (5 ms)
    ✓ should reject rerank of another users movie (4 ms)
    ✓ should handle compare without active rerank session (3 ms)
    ✓ should handle rerank start without movieId (3 ms)
    ✓ should handle compare with invalid preferredMovieId (9 ms)
    ✓ should handle multiple sequential rerank sessions (14 ms)
    ✓ should handle rerank with only 2 movies (8 ms)
    ✓ should reject unauthorized rerank request (4 ms)
    ✓ should reject unauthorized rerank compare (3 ms)
    ✓ should handle rerank where movie stays at same position (10 ms)
    ✓ should handle rerank with 15 movies (16 ms)
    ✓ should handle reranking all movies one by one (18 ms)
    ✓ should handle compare with missing preferredMovieId field (6 ms)
    ✓ should handle rerank with 7 movies (balanced binary tree) (9 ms)

🌐 TMDB ⬅️  GET /movie/300005 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.402Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300006 params={"language":"en-US","api_key":"***"}
FAIL tests/unmocked/userRoutes.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m191[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m191[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m300[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m300[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m408[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m408[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m473[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m473[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m573[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m573[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m

PASS tests/unmocked/allMovieRoutes.unmocked.test.ts (6.334 s)
  Comprehensive Movie Routes Tests
    ✓ should rank first movie directly (200 ms)
    ✓ should trigger comparison when ranking second movie (89 ms)
    ✓ should handle movie comparison (87 ms)
    ✓ should delete ranked movie and adjust ranks (9 ms)
    ✓ should get all ranked movies in order (8 ms)
    ✓ should handle watchlist removal when ranking movie (120 ms)
    ✓ should handle ranking with missing fields (6 ms)
    ✓ should handle comparison without session (4 ms)
    ✓ should handle deleting non-existent movie (5 ms)
    ✓ should handle duplicate movie ranking (129 ms)
    ✓ should handle multiple movie rankings (306 ms)
    ✓ should handle comparison with invalid movie ID (90 ms)

🌐 TMDB ⬅️  GET /movie/300006 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.474Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300007 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.549Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300008 params={"language":"en-US","api_key":"***"}
FAIL tests/unmocked/feedRouteHandlers.unmocked.test.ts (28.039 s)
  Feed Route Handlers - Inline Handlers
    ✓ should get friends feed activities with enrichment (247 ms)
    ✓ should return empty feed when user has no friends (23 ms)
    ✓ should handle activities missing overview and poster (100 ms)
    ✓ should include like counts in feed (145 ms)
    ✓ should include comment counts in feed (108 ms)
    ✓ should mark activities liked by user (137 ms)
    ✓ should show current rank from RankedMovie collection (150 ms)
    ✓ should aggregate activities from multiple friends (178 ms)
    ✓ should handle errors gracefully (41 ms)
    ✓ should get users own activities (112 ms)
    ✓ should return empty array when user has no activities (9 ms)
    ✕ should establish SSE stream (10006 ms)
    ✕ should like an activity (27 ms)
    ✓ should return 404 when liking non-existent activity (7 ms)
    ✕ should allow liking own activity without notification (10 ms)
    ✕ should handle duplicate like gracefully (11 ms)
    ✕ should unlike an activity (9 ms)
    ✓ should handle unlike when not previously liked (8 ms)
    ✕ should get comments for an activity (11 ms)
    ✕ should return empty array when no comments (11 ms)
    ✕ should add comment to activity (29 ms)
    ✕ should reject comment without text (10 ms)
    ✓ should return 404 when commenting on non-existent activity (8 ms)
    ✕ should send notification when commenting (8 ms)
    ✕ should not send notification when commenting on own activity (11 ms)
    ✓ should reject unauthorized access to feed (6 ms)
    ✓ should reject unauthorized access to /me (7 ms)
    ✓ should reject unauthorized access to /stream (6 ms)
    ✕ should reject unauthorized like (10 ms)
    ✕ should reject unauthorized comment (9 ms)

  ● Feed Route Handlers - Inline Handlers › should establish SSE stream

    thrown: "Exceeded timeout of 10000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      289 |
      290 |   // Test Case 12: GET /stream (SSE)
    > 291 |   it('should establish SSE stream', async () => {
          |   ^
      292 |     const res = await request(app)
      293 |       .get('/stream')
      294 |       .set('Authorization', `Bearer ${token1}`)

      at tests/unmocked/feedRouteHandlers.unmocked.test.ts:291:3
      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:19:1)

  ● Feed Route Handlers - Inline Handlers › should like an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      313 |       .set('Authorization', `Bearer ${token1}`);
      314 |
    > 315 |     expect(res.status).toBe(200);
          |                        ^
      316 |
      317 |     // Verify like was created
      318 |     const like = await Like.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:315:24)

  ● Feed Route Handlers - Inline Handlers › should allow liking own activity without notification

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      348 |       .set('Authorization', `Bearer ${token1}`);
      349 |
    > 350 |     expect(res.status).toBe(200);
          |                        ^
      351 |   });
      352 |
      353 |   // Test Case 16: POST /:activityId/like duplicate

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:350:24)

  ● Feed Route Handlers - Inline Handlers › should handle duplicate like gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 400, 409, 500]

      372 |
      373 |     // Should handle duplicate (unique index error)
    > 374 |     expect([200, 400, 409, 500]).toContain(res.status);
          |                                  ^
      375 |   });
      376 |
      377 |   // Test Case 17: DELETE /:activityId/like

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:374:34)

  ● Feed Route Handlers - Inline Handlers › should unlike an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      395 |       .set('Authorization', `Bearer ${token1}`);
      396 |
    > 397 |     expect(res.status).toBe(200);
          |                        ^
      398 |
      399 |     // Verify like was deleted
      400 |     const like = await Like.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:397:24)

  ● Feed Route Handlers - Inline Handlers › should get comments for an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      450 |       .set('Authorization', `Bearer ${token1}`);
      451 |
    > 452 |     expect(res.status).toBe(200);
          |                        ^
      453 |   });
      454 |
      455 |   // Test Case 20: GET /:activityId/comments with no comments

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:452:24)

  ● Feed Route Handlers - Inline Handlers › should return empty array when no comments

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      467 |       .set('Authorization', `Bearer ${token1}`);
      468 |
    > 469 |     expect(res.status).toBe(200);
          |                        ^
      470 |   });
      471 |
      472 |   // Test Case 21: POST /:activityId/comments

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:469:24)

  ● Feed Route Handlers - Inline Handlers › should add comment to activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      485 |       .send({ text: 'Great movie!' });
      486 |
    > 487 |     expect(res.status).toBe(200);
          |                        ^
      488 |
      489 |     // Verify comment was created
      490 |     const comment = await Comment.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:487:24)

  ● Feed Route Handlers - Inline Handlers › should reject comment without text

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      510 |       .send({});
      511 |
    > 512 |     expect(res.status).toBe(400);
          |                        ^
      513 |   });
      514 |
      515 |   // Test Case 23: POST /:activityId/comments on non-existent activity

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:512:24)

  ● Feed Route Handlers - Inline Handlers › should send notification when commenting

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      540 |       .send({ text: 'Amazing!' });
      541 |
    > 542 |     expect(res.status).toBe(200);
          |                        ^
      543 |   });
      544 |
      545 |   // Test Case 25: POST /:activityId/comments on own activity (no notification)

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:542:24)

  ● Feed Route Handlers - Inline Handlers › should not send notification when commenting on own activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      558 |       .send({ text: 'Self comment' });
      559 |
    > 560 |     expect(res.status).toBe(200);
          |                        ^
      561 |   });
      562 |
      563 |   // Test Case 26: Unauthorized access to feed

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:560:24)

  ● Feed Route Handlers - Inline Handlers › should reject unauthorized like

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 404

      598 |       .post(`/api/feed/${(activity as any)._id.toString()}/like`);
      599 |
    > 600 |     expect(res.status).toBe(401);
          |                        ^
      601 |   });
      602 |
      603 |   // Test Case 30: Unauthorized comment

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:600:24)

  ● Feed Route Handlers - Inline Handlers › should reject unauthorized comment

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 404

      615 |       .send({ text: 'Comment' });
      616 |
    > 617 |     expect(res.status).toBe(401);
          |                        ^
      618 |   });
      619 | });

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:617:24)

FAIL tests/unmocked/rerankController.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/rerankController.unmocked.test.ts[0m:[93m474[0m:[93m28[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m474[0m     await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                           ~~~~~~~~~~~[0m
    [96mtests/unmocked/rerankController.unmocked.test.ts[0m:[93m510[0m:[93m28[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m510[0m     await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                           ~~~~~~~~~~~[0m

🌐 TMDB ⬅️  GET /movie/300008 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.622Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300009 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300009 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.694Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300010 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300010 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.767Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300010,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300011 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300011 ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.837Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300011,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300012 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300012 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.907Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300012,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300013 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300013 ERROR 67ms: Request failed with status code 401
[2m[2025-10-29T06:01:57.975Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300013,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300014 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300014 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.048Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300014,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300015 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300015 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.121Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300015,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300016 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300016 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.194Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300016,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300017 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300017 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.264Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300017,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300018 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300018 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.337Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300018,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300019 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300019 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.409Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300019,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300020 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300020 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.478Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300020,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300021 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300021 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.549Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300021,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300022 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300022 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.625Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300022,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300023 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300023 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.700Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300023,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300024 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300024 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.775Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 300024,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300000/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.848Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300001/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.919Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300002/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:58.993Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300003/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.065Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300004/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.138Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300005/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300005/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.211Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300006/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300006/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.281Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300007/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300007/similar ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.350Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300008/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300008/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.420Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300009/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300009/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.493Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300000/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.566Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300001/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.640Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300002/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.714Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300003/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300003/recommendations ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.783Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300004/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300004/recommendations ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.855Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300005/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300005/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:01:59.928Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300006/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300006/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.001Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/300007/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/300007/recommendations ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.076Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 300007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.158Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.241Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
FAIL tests/unmocked/watchlistRoutes.unmocked.test.ts
  Watchlist Routes - Unmocked Tests
    GET /
      ✓ should get user watchlist successfully (489 ms)
      ✓ should return empty array for empty watchlist (11 ms)
      ✓ should only return current user watchlist items (9 ms)
      ✓ should sort watchlist by createdAt descending (20 ms)
      ✓ should handle database error gracefully (37 ms)
    POST /
      ✕ should add movie to watchlist successfully (18 ms)
      ✕ should add movie with minimal fields (movieId and title only) (8 ms)
      ✕ should enrich missing posterPath from TMDB (7 ms)
      ✕ should enrich missing overview from TMDB (10 ms)
      ✕ should handle TMDB enrichment failure gracefully (9 ms)
      ✓ should reject missing movieId (8 ms)
      ✓ should reject missing title (7 ms)
      ✕ should reject duplicate movie (10 ms)
      ✕ should allow different users to add same movie (10 ms)
      ✕ should handle movieId as number (9 ms)
      ✕ should preserve all provided fields (7 ms)
      ✓ should handle database save error gracefully (12 ms)
    DELETE /:movieId
      ✓ should remove movie from watchlist successfully (17 ms)
      ✓ should only remove from current user watchlist (9 ms)
      ✓ should return 404 when movie not in watchlist (9 ms)
      ✓ should handle movieId as number parameter (9 ms)
      ✓ should handle invalid movieId format gracefully (13 ms)
      ✓ should handle database error gracefully (17 ms)
      ✓ should not affect other watchlist items (12 ms)
    Edge Cases
      ✕ should handle very long movie titles (11 ms)
      ✕ should handle special characters in title (9 ms)
      ✓ should handle zero as movieId (6 ms)
      ✕ should handle large movieId numbers (7 ms)

  ● Watchlist Routes - Unmocked Tests › POST / › should add movie to watchlist successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      183 |         });
      184 |
    > 185 |       expect(res.status).toBe(200);
          |                          ^
      186 |       expect(res.body.success).toBe(true);
      187 |       expect(res.body.data.movieId).toBe(mockMovies.inception.id);
      188 |       expect(res.body.data.title).toBe(mockMovies.inception.title);

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:185:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should add movie with minimal fields (movieId and title only)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      206 |         });
      207 |
    > 208 |       expect(res.status).toBe(200);
          |                          ^
      209 |       expect(res.body.success).toBe(true);
      210 |       expect(res.body.data.movieId).toBe(550);
      211 |       expect(res.body.data.title).toBe('Fight Club');

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:208:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should enrich missing posterPath from TMDB

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      231 |         });
      232 |
    > 233 |       expect(res.status).toBe(200);
          |                          ^
      234 |       expect(res.body.data.posterPath).toBe('/enriched-poster.jpg');
      235 |       expect(res.body.data.overview).toBe('Enriched overview');
      236 |       expect(mockGet).toHaveBeenCalledWith('/movie/550', { params: { language: 'en-US' } });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:233:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should enrich missing overview from TMDB

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      257 |         });
      258 |
    > 259 |       expect(res.status).toBe(200);
          |                          ^
      260 |       expect(res.body.data.overview).toBe('Enriched overview text');
      261 |       expect(res.body.data.posterPath).toBe('/existing-poster.jpg'); // Existing poster preserved
      262 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:259:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should handle TMDB enrichment failure gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      276 |
      277 |       // Should still succeed even if TMDB fails
    > 278 |       expect(res.status).toBe(200);
          |                          ^
      279 |       expect(res.body.success).toBe(true);
      280 |       expect(res.body.data.movieId).toBe(550);
      281 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:278:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should reject duplicate movie

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 409

      322 |         });
      323 |
    > 324 |       expect(res.status).toBe(400);
          |                          ^
      325 |       expect(res.body.success).toBe(false);
      326 |       expect(res.body.message).toContain('already in watchlist');
      327 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:324:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should allow different users to add same movie

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      342 |         });
      343 |
    > 344 |       expect(res.status).toBe(200);
          |                          ^
      345 |       expect(res.body.success).toBe(true);
      346 |     });
      347 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:344:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should handle movieId as number

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      355 |         });
      356 |
    > 357 |       expect(res.status).toBe(200);
          |                          ^
      358 |       expect(res.body.data.movieId).toBe(550);
      359 |     });
      360 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:357:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should preserve all provided fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      370 |         });
      371 |
    > 372 |       expect(res.status).toBe(200);
          |                          ^
      373 |       expect(res.body.data.movieId).toBe(550);
      374 |       expect(res.body.data.title).toBe('Fight Club');
      375 |       expect(res.body.data.posterPath).toBe('/custom-poster.jpg');

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:372:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle very long movie titles

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      521 |         });
      522 |
    > 523 |       expect(res.status).toBe(200);
          |                          ^
      524 |       expect(res.body.data.title).toBe(longTitle);
      525 |     });
      526 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:523:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle special characters in title

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      536 |         });
      537 |
    > 538 |       expect(res.status).toBe(200);
          |                          ^
      539 |       expect(res.body.data.title).toBe(specialTitle);
      540 |     });
      541 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:538:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle large movieId numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      565 |         });
      566 |
    > 567 |       expect(res.status).toBe(200);
          |                          ^
      568 |       expect(res.body.data.movieId).toBe(largeId);
      569 |     });
      570 |   });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:567:26)

🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.318Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/similar ERROR 77ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.396Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 130ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.528Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.598Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400000 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.697Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 400000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400001 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.767Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 400001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400002 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.839Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 400002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400003 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.910Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 400003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400000/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:00.980Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400001/similar params={"language":"en-US","page":1,"api_key":"***"}
PASS tests/unmocked/watchlist.unmocked.test.ts (7.584 s)
  Unmocked: GET /watchlist
    ✓ should return user watchlist (23 ms)
    ✓ should return empty watchlist (6 ms)
    ✓ should reject unauthenticated watchlist request (4 ms)
  Unmocked: POST /watchlist
    ✓ should successfully add movie to watchlist (18 ms)
    ✓ should reject duplicate watchlist item (14 ms)
    ✓ should reject incomplete watchlist entry (5 ms)
  Unmocked: DELETE /watchlist/:movieId
    ✓ should successfully remove movie from watchlist (10 ms)
    ✓ should reject removal of non-existent watchlist item (5 ms)

🌐 TMDB ⬅️  GET /movie/400001/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.051Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400002/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.122Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400000/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.192Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400001/recommendations ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.262Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/400002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/400002/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.336Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 400002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500000 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.421Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500001 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.492Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500002 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.563Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500003 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.636Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500004 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.709Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500005 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500005 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.779Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 500005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500000/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.853Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500001/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.924Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500002/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:01.996Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500003/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.068Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500000/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.143Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500001/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.217Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/500002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/500002/recommendations ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.288Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 500002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600000 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.387Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600001 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.459Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600002 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.531Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600003 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.602Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600004 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.675Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600005 params={"language":"en-US","api_key":"***"}
PASS tests/unmocked/feed.unmocked.test.ts (12.957 s)
  Unmocked: GET /feed
    ✓ should return feed activities from friends (231 ms)
    ✓ should return empty feed for user with no friends (17 ms)
    ✓ should reject unauthenticated feed request (4 ms)
  Unmocked: POST /feed/:activityId/like
    ✓ should successfully like an activity (23 ms)
    ✓ should reject like on non-existent activity (8 ms)
    ✓ should reject duplicate like on same activity (9 ms)
  Unmocked: GET /feed/:activityId/comments
    ✓ should return comments for activity (12 ms)
    ✓ should return empty array for activity with no comments (6 ms)
  Unmocked: POST /feed/:activityId/comments
    ✓ should successfully post a comment (15 ms)
    ✓ should reject empty comment (4 ms)
    ✓ should reject comment exceeding 500 characters (4 ms)

🌐 TMDB ⬅️  GET /movie/600005 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.745Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600006 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600006 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.815Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600007 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.887Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600008 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600008 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:02.962Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600009 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600009 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.031Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600010 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600010 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.105Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600010,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600011 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600011 ERROR 141ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.246Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600011,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600012 params={"language":"en-US","api_key":"***"}
PASS tests/unmocked/friends.unmocked.test.ts (13.509 s)
  Unmocked: GET /friends
    ✓ should return user friends list (75 ms)
    ✓ should return empty friends list for isolated user (11 ms)
    ✓ should reject unauthenticated friends request (3 ms)
  Unmocked: GET /friends/requests
    ✓ should return pending friend requests (12 ms)
  Unmocked: POST /friends/request
    ✓ should successfully send friend request (28 ms)
    ✓ should reject request to non-existent user (11 ms)
    ✓ should reject self-friend request (7 ms)
    ✓ should reject request to existing friend (10 ms)
    ✓ should reject duplicate pending request (11 ms)
  Unmocked: POST /friends/respond
    ✓ should successfully accept friend request (24 ms)
    ✓ should successfully reject friend request (6 ms)
  Unmocked: DELETE /friends/:friendId
    ✓ should successfully remove friend (7 ms)
    ✓ should reject removal of non-existent friend (4 ms)

🌐 TMDB ⬅️  GET /movie/600012 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.319Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 600012,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600000/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.392Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600001/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.465Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600002/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.537Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600003/similar ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.605Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600004/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.676Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600005/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600005/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.747Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600006/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600006/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.820Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600007/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600007/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.893Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600000/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:03.966Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600001/recommendations ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.034Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600002/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.108Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600003/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600003/recommendations ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.178Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/600004/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/600004/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.248Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 600004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700000 ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.339Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700001 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.409Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700002 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.478Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700003 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.549Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700004 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.620Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700005 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700005 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.693Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700006 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700006 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.766Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700007 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.838Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700008 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700008 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.910Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700009 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700009 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:04.981Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700010 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700010 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.051Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700010,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700011 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700011 ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.119Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700011,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700012 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700012 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.190Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700012,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700013 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700013 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.263Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700013,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700014 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700014 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.335Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 700014,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700000/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.408Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700001/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.482Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700002/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.555Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700003/similar ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.626Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700004/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.699Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700005/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700005/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.769Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700006/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700006/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.842Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700007/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700007/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:05.917Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700008/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700008/similar ERROR 137ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.054Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700000/recommendations ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.122Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700001/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.195Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700002/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.268Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700003/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700003/recommendations ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.338Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700004/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700004/recommendations ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.407Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/700005/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/700005/recommendations ERROR 135ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.542Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 700005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800000 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800000 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.635Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800001 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800001 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.706Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800002 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800002 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.776Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800003 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800003 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.846Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800004 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800004 ERROR 67ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.914Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800005 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800005 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:06.988Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800006 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800006 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.058Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800007 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800007 ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.133Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800008 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800008 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.206Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800009 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800009 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.280Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800010 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800010 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.350Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800010,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800011 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800011 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.422Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800011,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800012 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800012 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.494Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800012,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800013 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800013 ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.562Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800013,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800014 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800014 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.635Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800014,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800015 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800015 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.705Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800015,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800016 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800016 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.778Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800016,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800017 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800017 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.848Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800017,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800018 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800018 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.918Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800018,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800019 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800019 ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:07.988Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 800019,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800000/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800000/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.061Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800001/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800001/similar ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.134Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800002/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800002/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.205Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800003/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800003/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.277Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800004/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800004/similar ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.349Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800005/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800005/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.419Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800006/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800006/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.490Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800007/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800007/similar ERROR 127ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.621Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800008/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800008/similar ERROR 75ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.699Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800008,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800009/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800009/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.768Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800009,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800000/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800000/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.842Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800000,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800001/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800001/recommendations ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.914Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800001,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800002/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800002/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:08.988Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800002,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800003/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800003/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.058Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800003,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800004/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800004/recommendations ERROR 66ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.125Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800004,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800005/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800005/recommendations ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.196Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800005,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800006/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800006/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.269Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800006,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/800007/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/800007/recommendations ERROR 79ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.351Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 800007,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 77ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.492Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.566Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.639Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /trending/movie/week params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /trending/movie/week ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.716Z][0m [31mERROR[0m Trending movies error {
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /trending/movie/week params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /trending/movie/week ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.794Z][0m [31mERROR[0m Trending movies error {
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 72ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.877Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:09.945Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901ade1cba1940ebbcb671d",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.015Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901ade1cba1940ebbcb671d",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205 ERROR 73ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.097Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238 ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.168Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278 params={"language":"en-US","api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278 ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.240Z][0m [33mWARN[0m Failed to fetch TMDB details for preference analysis {
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.311Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/similar ERROR 69ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.380Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/similar params={"language":"en-US","page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/similar ERROR 70ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.450Z][0m [33mWARN[0m Failed to fetch similar movies {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/27205/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/27205/recommendations ERROR 71ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.521Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 27205,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/238/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/238/recommendations ERROR 68ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.589Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 238,
  "error": "Request failed with status code 401"
}
🌐 TMDB ➡️  GET /movie/278/recommendations params={"page":1,"api_key":"***"}
🌐 TMDB ⬅️  GET /movie/278/recommendations ERROR 74ms: Request failed with status code 401
[2m[2025-10-29T06:02:10.664Z][0m [33mWARN[0m Failed to fetch TMDB recommendations {
  "userId": "6901adcfcba1940ebbcb6543",
  "movieId": 278,
  "error": "Request failed with status code 401"
}
PASS tests/unmocked/recommendationController.unmocked.test.ts (21.448 s)
  Recommendation Controller Direct Tests
    ✓ should handle recommendations with 1 ranked movie (331 ms)
    ✓ should handle recommendations with 3 ranked movies (694 ms)
    ✓ should handle recommendations with many ranked movies (1200 ms)
    ✓ should handle recommendations with 5 ranked movies (684 ms)
    ✓ should handle recommendations with 20 ranked movies (1698 ms)
    ✓ should handle recommendations with 50 ranked movies (3201 ms)
    ✓ should handle recommendations with 2 ranked movies (523 ms)
    ✓ should handle recommendations with 7 ranked movies (735 ms)
    ✓ should handle recommendations with 12 ranked movies (952 ms)
    ✓ should handle recommendations with 25 ranked movies (1960 ms)
    ✓ should handle recommendations with 30 ranked movies (2294 ms)
    ✓ should handle recommendations with 40 ranked movies (2815 ms)
    ✓ should handle recommendations with limit param (281 ms)
    ✓ should get trending movies (77 ms)
    ✓ should get trending movies without query params (77 ms)
    ✓ should handle recommendations for different user (222 ms)
    ✓ should handle recommendations with varied movie IDs (648 ms)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
-----------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------
File                               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                 
-----------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------
All files                          |   87.12 |    69.76 |    89.3 |   87.63 |                                                                   
 src                               |   26.31 |    35.29 |       0 |   26.31 |                                                                   
  config.ts                        |   26.31 |    35.29 |       0 |   26.31 | 8-28,34,36                                                        
 src/controllers                   |   83.85 |    58.97 |     100 |   83.44 |                                                                   
  movieComparisionController.ts    |   96.12 |       70 |     100 |   95.86 | 23,26,36,154,183                                                  
  rerankController.ts              |   34.37 |    22.22 |     100 |   33.33 | 10,17-63                                                          
 src/controllers/auth              |   85.29 |    53.84 |      75 |   83.33 |                                                                   
  authController.ts                |   85.29 |    53.84 |      75 |   83.33 | 14,46,74,83,97                                                    
 src/controllers/recommendations   |   98.52 |    72.36 |     100 |   98.47 |                                                                   
  movieRecommendationController.ts |   98.52 |    72.36 |     100 |   98.47 | 108,135                                                           
 src/middleware                    |     100 |    66.66 |     100 |     100 |                                                                   
  auth.ts                          |     100 |    66.66 |     100 |     100 | 19                                                                
 src/models/feed                   |     100 |      100 |     100 |     100 |                                                                   
  Comment.ts                       |     100 |      100 |     100 |     100 |                                                                   
  FeedActivity.ts                  |     100 |      100 |     100 |     100 |                                                                   
  Like.ts                          |     100 |      100 |     100 |     100 |                                                                   
 src/models/friend                 |     100 |      100 |     100 |     100 |                                                                   
  Friend.ts                        |     100 |      100 |     100 |     100 |                                                                   
 src/models/movie                  |     100 |      100 |     100 |     100 |                                                                   
  RankedMovie.ts                   |     100 |      100 |     100 |     100 |                                                                   
 src/models/user                   |     100 |      100 |     100 |     100 |                                                                   
  User.ts                          |     100 |      100 |     100 |     100 |                                                                   
 src/models/watch                  |     100 |      100 |     100 |     100 |                                                                   
  WatchlistItem.ts                 |     100 |      100 |     100 |     100 |                                                                   
 src/routes                        |   84.61 |    69.39 |   82.66 |   85.71 |                                                                   
  authRoutes.ts                    |     100 |      100 |     100 |     100 |                                                                   
  feedRoutes.ts                    |    79.7 |    59.49 |   81.48 |   83.51 | 38-42,154-158,172-173,185-186,201-202,255,330-334,390,442-464     
  friendRoutes.ts                  |   80.83 |    77.77 |   81.25 |   80.24 | 173-180,252-258,278,305-321,327-347                               
  movieRoutes.ts                   |   99.42 |    73.22 |   95.45 |     100 | 20,52-60,71-93,114,180,186-187,313-314,360-373,397                
  quoteRoutes.ts                   |     100 |      100 |     100 |     100 |                                                                   
  recommendationRoutes.ts          |     100 |      100 |     100 |     100 |                                                                   
  userRoutes.ts                    |   52.23 |    41.17 |   33.33 |   52.23 | 16,21-42,69-70,76-77,97,103-104,109-120,126-134                   
  watchlistRoutes.ts               |     100 |    85.71 |     100 |     100 | 51-52                                                             
 src/services                      |      80 |       58 |     100 |      80 |                                                                   
  notification.service.ts          |      80 |       58 |     100 |      80 | 34,38,51-67,81-82,133-134,169,183-184,215,233-234,286-287,344-345 
 src/services/auth                 |     100 |      100 |     100 |     100 |                                                                   
  authService.ts                   |     100 |      100 |     100 |     100 |                                                                   
 src/services/sse                  |     100 |      100 |     100 |     100 |                                                                   
  sseService.ts                    |     100 |      100 |     100 |     100 |                                                                   
 src/services/tmdb                 |   98.59 |    84.44 |     100 |     100 |                                                                   
  tmdbClient.ts                    |   97.56 |       80 |     100 |     100 | 8,41-44,54                                                        
  tmdbTaglineService.ts            |     100 |    93.33 |     100 |     100 | 41                                                                
 src/utils                         |   97.82 |      100 |   94.11 |     100 |                                                                   
  asyncHandler.ts                  |      80 |      100 |   66.66 |     100 |                                                                   
  comparisonSession.ts             |     100 |      100 |     100 |     100 |                                                                   
  logger.ts                        |     100 |      100 |     100 |     100 |                                                                   
-----------------------------------|---------|----------|---------|---------|-------------------------------------------------------------------

=============================== Coverage summary ===============================
Statements   : 87.12% ( 1205/1383 )
Branches     : 69.76% ( 390/559 )
Functions    : 89.3% ( 142/159 )
Lines        : 87.63% ( 1162/1326 )
================================================================================
Summary of all failing tests
FAIL tests/mocked/feedRoutes.mocked.test.ts (16.983 s)
  ● Feed Routes - Mocked Error Tests › POST /:activityId/like error handling › should handle notification errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      217 |
      218 |       // Should still succeed even if notification fails
    > 219 |       expect(res.status).toBe(200);
          |                          ^
      220 |       expect(res.body.success).toBe(true);
      221 |     });
      222 |

      at Object.<anonymous> (tests/mocked/feedRoutes.mocked.test.ts:219:26)

  ● Feed Routes - Mocked Error Tests › POST /:activityId/comments error handling › should handle notification errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      342 |
      343 |       // Should still succeed even if notification fails
    > 344 |       expect(res.status).toBe(200);
          |                          ^
      345 |       expect(res.body.success).toBe(true);
      346 |     });
      347 |

      at Object.<anonymous> (tests/mocked/feedRoutes.mocked.test.ts:344:26)

FAIL tests/unmocked/movieComparisonAdvanced.unmocked.test.ts (17.128 s)
  ● Advanced Movie Comparison Controller Tests › should remove movie from watchlist when ranking

    expect(received).toBeNull()

    Received: {"__v": 0, "_id": "6901adc8abcf862665fb43d7", "createdAt": 2025-10-29T06:01:44.891Z, "movieId": 27205, "overview": "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea.", "posterPath": "/oYm8f6YSxFab6XwaxmTeGa90RWl.jpg", "title": "Inception", "updatedAt": 2025-10-29T06:01:44.891Z, "userId": "6901adc7abcf862665fb43b4"}

      165 |       movieId: mockMovies.inception.id
      166 |     });
    > 167 |     expect(watchlistItem).toBeNull();
          |                           ^
      168 |   });
      169 |
      170 |   // Test Case 4: Complex comparison with 10 movies

      at Object.<anonymous> (tests/unmocked/movieComparisonAdvanced.unmocked.test.ts:167:27)

  ● Advanced Movie Comparison Controller Tests › should handle multiple watchlist items during ranking

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 2

      364 |     // Both should be removed from watchlist
      365 |     const count = await WatchlistItem.countDocuments({ userId: user._id });
    > 366 |     expect(count).toBe(0);
          |                   ^
      367 |   });
      368 |
      369 |   // Test Case 8: Comparison with exact middle selection

      at Object.<anonymous> (tests/unmocked/movieComparisonAdvanced.unmocked.test.ts:366:19)

FAIL tests/unmocked/user.unmocked.test.ts (17.277 s)
  ● Unmocked: PUT /users/profile › should successfully update user profile name

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "Updated Name"
    Received: undefined

      47 |
      48 |     expect(res.status).toStrictEqual(200);
    > 49 |     expect(res.body.name).toStrictEqual(newName);
         |                           ^
      50 |
      51 |     // Verify update in database
      52 |     const updatedUser = await User.findById(user._id);

      at Object.<anonymous> (tests/unmocked/user.unmocked.test.ts:49:27)

FAIL tests/unmocked/recommendations.unmocked.test.ts (18.079 s)
  ● Unmocked: GET /recommendations/trending › should return trending movies

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      127 |       .set('Authorization', `Bearer ${token}`);
      128 |
    > 129 |     expect(res.status).toStrictEqual(200);
          |                        ^
      130 |     expect(res.body.success).toBe(true);
      131 |     expect(Array.isArray(res.body.data)).toBe(true);
      132 |   });

      at Object.<anonymous> (tests/unmocked/recommendations.unmocked.test.ts:129:24)

FAIL tests/unmocked/movieComparisonController.unmocked.test.ts (18.405 s)
  ● Movie Comparison Controller - Complete Coverage › should reject comparison without active session

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      354 |       });
      355 |
    > 356 |     expect(res.status).toBe(400);
          |                        ^
      357 |     expect(res.body.message).toContain('No active comparison');
      358 |   });
      359 |

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:356:24)

  ● Movie Comparison Controller - Complete Coverage › should finalize ranking when low > high

    expect(received).toBe(expected) // Object.is equality

    Expected: "added"
    Received: "compare"

      490 |       });
      491 |
    > 492 |     expect(res.body.status).toBe('added');
          |                             ^
      493 |     const movie = await RankedMovie.findOne({
      494 |       userId: user1._id,
      495 |       movieId: 200000

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:492:29)

  ● Movie Comparison Controller - Complete Coverage › should update ranks when finalizing

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      533 |
      534 |     const movies = await RankedMovie.find({ userId: user1._id }).sort({ rank: 1 });
    > 535 |     expect(movies.length).toBe(3);
          |                           ^
      536 |   });
      537 |
      538 |   it('should create feed activity when finalizing', async () => {

      at Object.<anonymous> (tests/unmocked/movieComparisonController.unmocked.test.ts:535:27)

FAIL tests/unmocked/allFeedRoutes.unmocked.test.ts
  ● Comprehensive Feed Routes Tests › should get empty feed with no friends

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get feed with friend activities

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should like a feed activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle duplicate like

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should unlike a feed activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get comments for activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should add comment to activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle empty comment

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle long comment

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle liking non-existent activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle unliking when no like exists

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle commenting on non-existent activity

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle feed pagination

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should get multiple comments

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle different activity types

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should reject unauthorized feed access

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

  ● Comprehensive Feed Routes Tests › should handle invalid activity ID format

    MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.

      28 |
      29 |   beforeAll(async () => {
    > 30 |     await mongoose.connect(process.env.MONGO_URI_FOR_TESTS!);
         |                    ^
      31 |
      32 |     app = express();
      33 |     app.use(express.json());

      at NativeConnection.createClient (node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:237:11)
      at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:1071:34)
      at Mongoose.connect (node_modules/mongoose/lib/mongoose.js:450:15)
      at Object.<anonymous> (tests/unmocked/allFeedRoutes.unmocked.test.ts:30:20)

FAIL tests/mocked/apis.mocked.test.ts
  ● Mocked: Feed API Errors › should handle feed fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      44 |       .set('Authorization', `Bearer ${token}`);
      45 |
    > 46 |     expect(res.status).toStrictEqual(500);
         |                        ^
      47 |   });
      48 |
      49 |   // Mocked behavior: Like creation fails due to database error

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:46:24)

  ● Mocked: Feed API Errors › should handle like creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      62 |       .send({});
      63 |
    > 64 |     expect(res.status).toStrictEqual(500);
         |                        ^
      65 |   });
      66 |
      67 |   // Mocked behavior: Comment validation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:64:24)

  ● Mocked: Feed API Errors › should handle invalid comment text

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      76 |       .send({ text: null });
      77 |
    > 78 |     expect(res.status).toStrictEqual(400);
         |                        ^
      79 |   });
      80 | });
      81 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:78:24)

  ● Mocked: Friends API Errors › should handle friends list fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      105 |       .set('Authorization', `Bearer ${token}`);
      106 |
    > 107 |     expect(res.status).toStrictEqual(500);
          |                        ^
      108 |   });
      109 |
      110 |   // Mocked behavior: Friend request database error

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:107:24)

  ● Mocked: Friends API Errors › should handle friend request creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      123 |       .send({ email: 'test@example.com' });
      124 |
    > 125 |     expect(res.status).toStrictEqual(500);
          |                        ^
      126 |   });
      127 |
      128 |   // Mocked behavior: User lookup fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:125:24)

  ● Mocked: Friends API Errors › should handle user lookup failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      141 |       .send({ email: 'nonexistent@example.com' });
      142 |
    > 143 |     expect(res.status).toStrictEqual(500);
          |                        ^
      144 |   });
      145 | });
      146 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:143:24)

  ● Mocked: Watchlist API Errors › should handle watchlist fetch failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      170 |       .set('Authorization', `Bearer ${token}`);
      171 |
    > 172 |     expect(res.status).toStrictEqual(500);
          |                        ^
      173 |   });
      174 |
      175 |   // Mocked behavior: Item creation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:172:24)

  ● Mocked: Watchlist API Errors › should handle watchlist item creation failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      188 |       .send({ movieId: 278, title: 'Movie' });
      189 |
    > 190 |     expect(res.status).toStrictEqual(500);
          |                        ^
      191 |   });
      192 |
      193 |   // Mocked behavior: Delete operation fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:190:24)

  ● Mocked: Watchlist API Errors › should handle watchlist item deletion failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      205 |       .set('Authorization', `Bearer ${token}`);
      206 |
    > 207 |     expect(res.status).toStrictEqual(500);
          |                        ^
      208 |   });
      209 | });
      210 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:207:24)

  ● Mocked: Recommendations API Errors › should handle trending movies fetch failure

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [500, 200]

      235 |       .set('Authorization', `Bearer ${token}`);
      236 |
    > 237 |     expect([500, 200]).toContain(res.status); // May cache or fail
          |                        ^
      238 |   });
      239 |
      240 |   // Mocked behavior: Database query fails for recommendations

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:237:24)

  ● Mocked: Recommendations API Errors › should handle recommendations generation failure

    Property `find` does not exist in the provided object

      244 |   // Expected output: Error message
      245 |   it('should handle recommendations generation failure', async () => {
    > 246 |     jest.spyOn(require('../../src/models/movie/RankedMovie'), 'find')
          |          ^
      247 |       .mockRejectedValueOnce(new Error('Database error'));
      248 |
      249 |     const res = await request(app)

      at ModuleMocker.spyOn (node_modules/jest-mock/build/index.js:731:13)
      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:246:10)

  ● Mocked: User API Errors › should handle profile update failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      281 |       .send({ name: 'New Name' });
      282 |
    > 283 |     expect(res.status).toStrictEqual(500);
          |                        ^
      284 |   });
      285 |
      286 |   // Mocked behavior: FCM token registration fails

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:283:24)

  ● Mocked: User API Errors › should handle FCM token registration failure

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 500
    Received: 404

      299 |       .send({ token: 'eODL6-Yk3jg:APA91bE...' });
      300 |
    > 301 |     expect(res.status).toStrictEqual(500);
          |                        ^
      302 |   });
      303 | });
      304 |

      at Object.<anonymous> (tests/mocked/apis.mocked.test.ts:301:24)

FAIL tests/mocked/movie.mocked.test.ts
  ● Mocked: GET /movies/search - TMDB API Failure › should return empty array for no matching results

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      75 |       .query({ query: 'xyz123nonexistent' });
      76 |
    > 77 |     expect(res.status).toStrictEqual(200);
         |                        ^
      78 |     expect(Array.isArray(res.body.results || res.body)).toBe(true);
      79 |   });
      80 |

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:77:24)

  ● Mocked: Movie Comparison and Addition - Database Failures › should reject duplicate movie ranking

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      153 |       });
      154 |
    > 155 |     expect(res.status).toStrictEqual(400);
          |                        ^
      156 |     findOneySpy.mockRestore();
      157 |   });
      158 | });

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:155:24)

  ● Mocked: GET /movies/ranked - Database Query Failure › should handle ranked movies query failure

    Database connection lost

      175 |   it('should handle ranked movies query failure', async () => {
      176 |     const findSpy = jest.spyOn(RankedMovie, 'find')
    > 177 |       .mockRejectedValueOnce(new Error('Database connection lost'));
          |                              ^
      178 |
      179 |     const res = await request(app)
      180 |       .get('/api/movies/ranked')

      at Object.<anonymous> (tests/mocked/movie.mocked.test.ts:177:30)

FAIL tests/unmocked/allRecommendationRoutes.unmocked.test.ts (19.823 s)
  ● Comprehensive Recommendation Routes Tests › should handle recommendation errors gracefully

    ValidationError: RankedMovie validation failed: movieId: Path `movieId` is required., title: Path `title` is required.

      at model.Object.<anonymous>.Document.invalidate (node_modules/mongoose/lib/document.js:3358:32)
      at node_modules/mongoose/lib/document.js:3119:17
      at node_modules/mongoose/lib/schemaType.js:1416:9

FAIL tests/mocked/tmdbServices.mocked.test.ts
  ● TMDB Client Tests › should log outgoing request

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "TMDB ➡️"

    Number of calls: 0

      140 |     getTmdbClient();
      141 |
    > 142 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      143 |       expect.stringContaining('TMDB ➡️')
      144 |     );
      145 |     expect(consoleLogSpy).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:142:27)

  ● TMDB Client Tests › should redact API key in request logs

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "***"

    Number of calls: 0

      167 |     getTmdbClient();
      168 |
    > 169 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      170 |       expect.stringContaining('***')
      171 |     );
      172 |     expect(consoleLogSpy).not.toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:169:27)

  ● TMDB Client Tests › should log successful response

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "TMDB ⬅️"

    Number of calls: 0

      201 |     responseInterceptor(mockResponse);
      202 |
    > 203 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      204 |       expect.stringContaining('TMDB ⬅️')
      205 |     );
      206 |     expect(consoleLogSpy).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:203:27)

  ● TMDB Client Tests › should calculate and log response time

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /\d+ms/

    Number of calls: 0

      235 |     responseInterceptor(mockResponse);
      236 |
    > 237 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      238 |       expect.stringMatching(/\d+ms/)
      239 |     );
      240 |   });

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:237:27)

  ● TMDB Client Tests › should log error response

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "ERROR"

    Number of calls: 0

      266 |     expect(() => errorInterceptor(mockError)).toThrow();
      267 |
    > 268 |     expect(consoleLogSpy).toHaveBeenCalledWith(
          |                           ^
      269 |       expect.stringContaining('ERROR')
      270 |     );
      271 |   });

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:268:27)

  ● TMDB Client Tests › should handle error without config

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      292 |
      293 |     expect(() => errorInterceptor(mockError)).toThrow();
    > 294 |     expect(consoleLogSpy).toHaveBeenCalled();
          |                           ^
      295 |   });
      296 | });
      297 |

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:294:27)

  ● TMDB Tagline Service Tests › should treat titles as case-insensitive for caching

    expect(received).toBe(expected) // Object.is equality

    Expected: "Cached"
    Received: "An amazing movie"

      519 |     const tagline = await fetchMovieTagline('TEST MOVIE', 2024);
      520 |
    > 521 |     expect(tagline).toBe('Cached');
          |                     ^
      522 |     expect(mockClient.get).toHaveBeenCalledTimes(2);
      523 |   });
      524 |

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:521:21)

  ● TMDB Tagline Service Tests › should handle year as string parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: "String year"
    Received: "New tagline"

      570 |     const tagline = await fetchMovieTagline('Movie', '2024');
      571 |
    > 572 |     expect(tagline).toBe('String year');
          |                     ^
      573 |   });
      574 |
      575 |   // Test Case 23: Trim whitespace from title

      at Object.<anonymous> (tests/mocked/tmdbServices.mocked.test.ts:572:21)

FAIL tests/unmocked/userProfile.unmocked.test.ts (20.242 s)
  ● Unmocked: PUT /users/profile › should update user profile name

    TypeError: Cannot read properties of undefined (reading 'name')

      47 |
      48 |     expect(res.status).toStrictEqual(200);
    > 49 |     expect(res.body.user.name).toStrictEqual(newName);
         |                          ^
      50 |
      51 |     const updatedUser = await User.findById(user._id);
      52 |     expect(updatedUser!.name).toStrictEqual(newName);

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:49:26)

  ● Unmocked: PUT /users/profile › should update user profile image

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      64 |       .send({ profileImageUrl: newImageUrl });
      65 |
    > 66 |     expect(res.status).toStrictEqual(200);
         |                        ^
      67 |     expect(res.body.user.profileImageUrl).toStrictEqual(newImageUrl);
      68 |
      69 |     const updatedUser = await User.findById(user._id);

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:66:24)

  ● Unmocked: PUT /users/profile › should update multiple profile fields

    TypeError: Cannot read properties of undefined (reading 'name')

      88 |
      89 |     expect(res.status).toStrictEqual(200);
    > 90 |     expect(res.body.user.name).toStrictEqual(newName);
         |                          ^
      91 |     expect(res.body.user.profileImageUrl).toStrictEqual(newImageUrl);
      92 |   });
      93 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:90:26)

  ● Unmocked: GET /users/profile/:userId › should get user profile by ID

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      283 |       .set('Authorization', `Bearer ${token}`);
      284 |
    > 285 |     expect(res.status).toStrictEqual(200);
          |                        ^
      286 |     expect(res.body.user).toBeDefined();
      287 |     expect(res.body.user.email).toStrictEqual(otherUser.email);
      288 |   });

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:285:24)

  ● Unmocked: GET /users/profile/:userId › should get own profile

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      297 |       .set('Authorization', `Bearer ${token}`);
      298 |
    > 299 |     expect(res.status).toStrictEqual(200);
          |                        ^
      300 |     expect(res.body.user.email).toStrictEqual(user.email);
      301 |   });
      302 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:299:24)

  ● Unmocked: GET /users/profile/:userId › should reject invalid user ID format

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      323 |       .set('Authorization', `Bearer ${token}`);
      324 |
    > 325 |     expect(res.status).toStrictEqual(400);
          |                        ^
      326 |   });
      327 |
      328 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:325:24)

  ● Unmocked: GET /users/profile/:userId › should reject unauthenticated profile request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      334 |       .get(`/api/users/profile/${otherUser._id}`);
      335 |
    > 336 |     expect(res.status).toStrictEqual(401);
          |                        ^
      337 |   });
      338 | });
      339 |

      at Object.<anonymous> (tests/unmocked/userProfile.unmocked.test.ts:336:24)

FAIL tests/unit/logger.unit.test.ts
  ● Logger Utility › info › should log info message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      23 |       logger.info('Test info message');
      24 |
    > 25 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      26 |       const call = consoleLogSpy.mock.calls[0][0];
      27 |       expect(call).toContain('INFO');
      28 |       expect(call).toContain('Test info message');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:25:29)

  ● Logger Utility › info › should log info message with arguments

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      32 |       logger.info('User logged in', { userId: '123', email: 'test@example.com' });
      33 |
    > 34 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      35 |       const call = consoleLogSpy.mock.calls[0][0];
      36 |       expect(call).toContain('INFO');
      37 |       expect(call).toContain('User logged in');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:34:29)

  ● Logger Utility › info › should handle multiple arguments

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      43 |       logger.info('Multiple args', 'arg1', 123, true);
      44 |
    > 45 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      46 |       const call = consoleLogSpy.mock.calls[0][0];
      47 |       expect(call).toContain('arg1');
      48 |       expect(call).toContain('123');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:45:29)

  ● Logger Utility › success › should log success message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      55 |       logger.success('Operation completed');
      56 |
    > 57 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      58 |       const call = consoleLogSpy.mock.calls[0][0];
      59 |       expect(call).toContain('SUCCESS');
      60 |       expect(call).toContain('Operation completed');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:57:29)

  ● Logger Utility › success › should log success with object data

    TypeError: Cannot read properties of undefined (reading '0')

      64 |       logger.success('Movie ranked', { movieId: 550, rank: 1 });
      65 |
    > 66 |       const call = consoleLogSpy.mock.calls[0][0];
         |                                               ^
      67 |       expect(call).toContain('SUCCESS');
      68 |       expect(call).toContain('Movie ranked');
      69 |       expect(call).toContain('movieId');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:66:47)

  ● Logger Utility › warn › should log warning message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      75 |       logger.warn('API rate limit approaching');
      76 |
    > 77 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      78 |       const call = consoleLogSpy.mock.calls[0][0];
      79 |       expect(call).toContain('WARN');
      80 |       expect(call).toContain('API rate limit approaching');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:77:29)

  ● Logger Utility › warn › should log warning with details

    TypeError: Cannot read properties of undefined (reading '0')

      84 |       logger.warn('Slow query detected', { duration: 5000, query: 'complex query' });
      85 |
    > 86 |       const call = consoleLogSpy.mock.calls[0][0];
         |                                               ^
      87 |       expect(call).toContain('WARN');
      88 |       expect(call).toContain('Slow query detected');
      89 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:86:47)

  ● Logger Utility › error › should log error message

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      94 |       logger.error('Database connection failed');
      95 |
    > 96 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
         |                             ^
      97 |       const call = consoleLogSpy.mock.calls[0][0];
      98 |       expect(call).toContain('ERROR');
      99 |       expect(call).toContain('Database connection failed');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:96:29)

  ● Logger Utility › error › should log error with error object

    TypeError: Cannot read properties of undefined (reading '0')

      104 |       logger.error('Unexpected error', { error: error.message, stack: 'stack trace' });
      105 |
    > 106 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      107 |       expect(call).toContain('ERROR');
      108 |       expect(call).toContain('Unexpected error');
      109 |       expect(call).toContain('Something went wrong');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:106:47)

  ● Logger Utility › debug › should log debug message in development mode

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      117 |       logger.debug('Debug information');
      118 |
    > 119 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      120 |       const call = consoleLogSpy.mock.calls[0][0];
      121 |       expect(call).toContain('DEBUG');
      122 |       expect(call).toContain('Debug information');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:119:29)

  ● Logger Utility › debug › should log debug with detailed data in development

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      147 |       });
      148 |
    > 149 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      150 |       const call = consoleLogSpy.mock.calls[0][0];
      151 |       expect(call).toContain('DEBUG');
      152 |       expect(call).toContain('State dump');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:149:29)

  ● Logger Utility › http › should log HTTP request with all parameters

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      158 |       logger.http('GET', '/api/movies', 200, 45);
      159 |
    > 160 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      161 |       const call = consoleLogSpy.mock.calls[0][0];
      162 |       expect(call).toContain('GET');
      163 |       expect(call).toContain('/api/movies');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:160:29)

  ● Logger Utility › http › should log HTTP request without status code

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      169 |       logger.http('POST', '/api/auth/signin');
      170 |
    > 171 |       expect(consoleLogSpy).toHaveBeenCalledTimes(1);
          |                             ^
      172 |       const call = consoleLogSpy.mock.calls[0][0];
      173 |       expect(call).toContain('POST');
      174 |       expect(call).toContain('/api/auth/signin');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:171:29)

  ● Logger Utility › http › should log HTTP request without duration

    TypeError: Cannot read properties of undefined (reading '0')

      178 |       logger.http('DELETE', '/api/friends/123', 204);
      179 |
    > 180 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      181 |       expect(call).toContain('DELETE');
      182 |       expect(call).toContain('/api/friends/123');
      183 |       expect(call).toContain('204');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:180:47)

  ● Logger Utility › http › should handle successful status codes (200-399)

    TypeError: Cannot read properties of undefined (reading '0')

      187 |       logger.http('GET', '/api/users', 200, 10);
      188 |
    > 189 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      190 |       expect(call).toContain('200');
      191 |     });
      192 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:189:47)

  ● Logger Utility › http › should handle error status codes (400+)

    TypeError: Cannot read properties of undefined (reading '0')

      194 |       logger.http('POST', '/api/movies', 404, 20);
      195 |
    > 196 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      197 |       expect(call).toContain('404');
      198 |     });
      199 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:196:47)

  ● Logger Utility › http › should handle server error status codes (500+)

    TypeError: Cannot read properties of undefined (reading '0')

      201 |       logger.http('GET', '/api/recommendations', 500, 100);
      202 |
    > 203 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      204 |       expect(call).toContain('500');
      205 |       expect(call).toContain('100ms');
      206 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:203:47)

  ● Logger Utility › http › should handle various HTTP methods

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 3
    Received number of calls: 0

      211 |       logger.http('HEAD', '/api/health', 200);
      212 |
    > 213 |       expect(consoleLogSpy).toHaveBeenCalledTimes(3);
          |                             ^
      214 |       expect(consoleLogSpy.mock.calls[0][0]).toContain('PUT');
      215 |       expect(consoleLogSpy.mock.calls[1][0]).toContain('PATCH');
      216 |       expect(consoleLogSpy.mock.calls[2][0]).toContain('HEAD');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:213:29)

  ● Logger Utility › Timestamp formatting › should include ISO timestamp in all log messages

    TypeError: Cannot read properties of undefined (reading '0')

      222 |       logger.info('Test message');
      223 |
    > 224 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      225 |       // ISO format: YYYY-MM-DDTHH:mm:ss.sssZ
      226 |       expect(call).toMatch(/\[\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z\]/);
      227 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:224:47)

  ● Logger Utility › Argument formatting › should format string arguments

    TypeError: Cannot read properties of undefined (reading '0')

      232 |       logger.info('Message', 'string arg');
      233 |
    > 234 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      235 |       expect(call).toContain('string arg');
      236 |     });
      237 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:234:47)

  ● Logger Utility › Argument formatting › should format number arguments

    TypeError: Cannot read properties of undefined (reading '0')

      239 |       logger.info('Message', 42, 3.14);
      240 |
    > 241 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      242 |       expect(call).toContain('42');
      243 |       expect(call).toContain('3.14');
      244 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:241:47)

  ● Logger Utility › Argument formatting › should format boolean arguments

    TypeError: Cannot read properties of undefined (reading '0')

      247 |       logger.info('Message', true, false);
      248 |
    > 249 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      250 |       expect(call).toContain('true');
      251 |       expect(call).toContain('false');
      252 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:249:47)

  ● Logger Utility › Argument formatting › should format object arguments as JSON

    TypeError: Cannot read properties of undefined (reading '0')

      255 |       logger.info('Message', { key: 'value', nested: { data: 123 } });
      256 |
    > 257 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      258 |       expect(call).toContain('"key"');
      259 |       expect(call).toContain('"value"');
      260 |       expect(call).toContain('"nested"');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:257:47)

  ● Logger Utility › Argument formatting › should format array arguments

    TypeError: Cannot read properties of undefined (reading '0')

      264 |       logger.info('Message', [1, 2, 3]);
      265 |
    > 266 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      267 |       expect(call).toContain('[');
      268 |       expect(call).toContain('1');
      269 |       expect(call).toContain('2');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:266:47)

  ● Logger Utility › Argument formatting › should handle null and undefined arguments

    TypeError: Cannot read properties of undefined (reading '0')

      274 |       logger.info('Message', null, undefined);
      275 |
    > 276 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      277 |       expect(call).toContain('null');
      278 |       expect(call).toContain('undefined');
      279 |     });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:276:47)

  ● Logger Utility › Argument formatting › should handle empty object

    TypeError: Cannot read properties of undefined (reading '0')

      282 |       logger.info('Message', {});
      283 |
    > 284 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      285 |       expect(call).toContain('{}');
      286 |     });
      287 |

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:284:47)

  ● Logger Utility › Argument formatting › should handle empty array

    TypeError: Cannot read properties of undefined (reading '0')

      289 |       logger.info('Message', []);
      290 |
    > 291 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      292 |       expect(call).toContain('[]');
      293 |     });
      294 |   });

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:291:47)

  ● Logger Utility › Integration scenarios › should handle rapid sequential log calls

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 4
    Received number of calls: 0

      301 |       logger.error('Message 4');
      302 |
    > 303 |       expect(consoleLogSpy).toHaveBeenCalledTimes(4);
          |                             ^
      304 |     });
      305 |
      306 |     it('should handle complex nested objects', () => {

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:303:29)

  ● Logger Utility › Integration scenarios › should handle complex nested objects

    TypeError: Cannot read properties of undefined (reading '0')

      321 |       logger.info('Complex data', complexObject);
      322 |
    > 323 |       const call = consoleLogSpy.mock.calls[0][0];
          |                                               ^
      324 |       expect(call).toContain('Complex data');
      325 |       expect(call).toContain('user');
      326 |       expect(call).toContain('profile');

      at Object.<anonymous> (tests/unit/logger.unit.test.ts:323:47)

FAIL tests/unmocked/movieComparison.unmocked.test.ts (20.457 s)
  ● Unmocked: POST /movies/rank › should reject missing required fields

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      150 |       });
      151 |
    > 152 |     expect(res.status).toStrictEqual(400);
          |                        ^
      153 |   });
      154 |
      155 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:152:24)

  ● Unmocked: POST /movies/compare › should reject comparison without preferredMovieId

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      300 |       .send({});
      301 |
    > 302 |     expect(res.status).toStrictEqual(400);
          |                        ^
      303 |   });
      304 |
      305 |   // Input: No active comparison session

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:302:24)

  ● Unmocked: POST /movies/compare › should reject comparison without active session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 200

      315 |       });
      316 |
    > 317 |     expect(res.status).toStrictEqual(400);
          |                        ^
      318 |   });
      319 |
      320 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/movieComparison.unmocked.test.ts:317:24)

FAIL tests/unmocked/auth.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m42[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m42[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m
    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m64[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m64[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m
    [96mtests/unmocked/auth.unmocked.test.ts[0m:[93m80[0m:[93m31[0m - [91merror[0m[90m TS2454: [0mVariable 'app' is used before being assigned.

    [7m80[0m     const res = await request(app)
    [7m  [0m [91m                              ~~~[0m

FAIL tests/unmocked/watchlistOperations.unmocked.test.ts (21.262 s)
  ● Unmocked: POST /watchlist - Additional Tests › should add movie to watchlist with all fields

    expect(received).toBeDefined()

    Received: undefined

      61 |     expect(res.status).toStrictEqual(201);
      62 |     expect(res.body.success).toStrictEqual(true);
    > 63 |     expect(res.body.watchlistItem).toBeDefined();
         |                                    ^
      64 |     expect(res.body.watchlistItem.movieId).toStrictEqual(mockMovies.inception.id);
      65 |
      66 |     const watchlistItem = await WatchlistItem.findOne({

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:63:36)

  ● Unmocked: POST /watchlist - Additional Tests › should reject duplicate movie in watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      119 |       });
      120 |
    > 121 |     expect(res.status).toStrictEqual(400);
          |                        ^
      122 |     expect(res.body.message).toMatch(/already|watchlist/i);
      123 |   });
      124 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:121:24)

  ● Unmocked: POST /watchlist - Additional Tests › should reject missing year

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 201

      171 |       });
      172 |
    > 173 |     expect(res.status).toStrictEqual(400);
          |                        ^
      174 |   });
      175 |
      176 |   // Input: Missing posterUrl

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:173:24)

  ● Unmocked: POST /watchlist - Additional Tests › should reject missing posterUrl

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 201

      188 |       });
      189 |
    > 190 |     expect(res.status).toStrictEqual(400);
          |                        ^
      191 |   });
      192 |
      193 |   // Input: No authentication

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:190:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should delete movie from watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      296 |       .set('Authorization', `Bearer ${token}`);
      297 |
    > 298 |     expect(res.status).toStrictEqual(200);
          |                        ^
      299 |     expect(res.body.success).toStrictEqual(true);
      300 |
      301 |     const watchlistItem = await WatchlistItem.findOne({

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:298:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should delete only specified movie from watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      343 |       .set('Authorization', `Bearer ${token}`);
      344 |
    > 345 |     expect(res.status).toStrictEqual(200);
          |                        ^
      346 |
      347 |     const deletedItem = await WatchlistItem.findOne({
      348 |       userId: user._id,

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:345:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should reject unauthenticated delete request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      366 |       .delete(`/api/watchlist/${mockMovies.inception.id}`);
      367 |
    > 368 |     expect(res.status).toStrictEqual(401);
          |                        ^
      369 |   });
      370 |
      371 |   // Input: Invalid movieId format

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:368:24)

  ● Unmocked: DELETE /watchlist/:movieId - Additional Tests › should handle invalid movieId format

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 404]

      378 |       .set('Authorization', `Bearer ${token}`);
      379 |
    > 380 |     expect([400, 404]).toContain(res.status);
          |                        ^
      381 |   });
      382 | });
      383 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:380:24)

  ● Unmocked: GET /watchlist - Additional Tests › should get multiple watchlist items

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      443 |
      444 |     expect(res.status).toStrictEqual(200);
    > 445 |     expect(Array.isArray(res.body.watchlist || res.body)).toBe(true);
          |                                                           ^
      446 |     const watchlist = res.body.watchlist || res.body;
      447 |     expect(watchlist.length).toStrictEqual(2);
      448 |   });

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:445:59)

  ● Unmocked: GET /watchlist - Additional Tests › should return only authenticated user watchlist

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 1
    Received: undefined

      475 |     expect(res.status).toStrictEqual(200);
      476 |     const watchlist = res.body.watchlist || res.body;
    > 477 |     expect(watchlist.length).toStrictEqual(1);
          |                              ^
      478 |     expect(watchlist[0].movieId).toStrictEqual(mockMovies.inception.id);
      479 |   });
      480 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:477:30)

  ● Unmocked: GET /watchlist - Additional Tests › should return empty array for empty watchlist

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      490 |     expect(res.status).toStrictEqual(200);
      491 |     const watchlist = res.body.watchlist || res.body;
    > 492 |     expect(Array.isArray(watchlist)).toBe(true);
          |                                      ^
      493 |     expect(watchlist.length).toStrictEqual(0);
      494 |   });
      495 |

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:492:38)

  ● Unmocked: GET /watchlist - Additional Tests › should return complete movie details in watchlist

    TypeError: Cannot read properties of undefined (reading 'title')

      527 |     expect(res.status).toStrictEqual(200);
      528 |     const watchlist = res.body.watchlist || res.body;
    > 529 |     expect(watchlist[0].title).toStrictEqual(mockMovies.inception.title);
          |                         ^
      530 |     expect(watchlist[0].year).toStrictEqual(mockMovies.inception.year);
      531 |     expect(watchlist[0].rating).toStrictEqual(mockMovies.inception.rating);
      532 |   });

      at Object.<anonymous> (tests/unmocked/watchlistOperations.unmocked.test.ts:529:25)

FAIL tests/unmocked/quote.unmocked.test.ts
  ● Unmocked: GET /quotes › should return quote for movie

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      45 |       .query({ title: 'Inception' });
      46 |
    > 47 |     expect(res.status).toStrictEqual(200);
         |                        ^
      48 |     expect(res.body).toHaveProperty('quote');
      49 |   });
      50 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:47:24)

  ● Unmocked: GET /quotes › should return fallback quote for unknown movie

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      59 |       .query({ title: 'NonexistentMoviexyz123' });
      60 |
    > 61 |     expect(res.status).toStrictEqual(200);
         |                        ^
      62 |     expect(res.body).toHaveProperty('quote');
      63 |   });
      64 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:61:24)

  ● Unmocked: GET /quotes › should reject unauthenticated quote request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 401
    Received: 404

      72 |       .query({ title: 'Inception' });
      73 |
    > 74 |     expect(res.status).toStrictEqual(401);
         |                        ^
      75 |   });
      76 |
      77 |   // Input: Missing title query parameter

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:74:24)

  ● Unmocked: GET /quotes › should reject quote request without title

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      84 |       .set('Authorization', `Bearer ${token}`);
      85 |
    > 86 |     expect(res.status).toStrictEqual(400);
         |                        ^
      87 |   });
      88 | });
      89 |

      at Object.<anonymous> (tests/unmocked/quote.unmocked.test.ts:86:24)

FAIL tests/mocked/friendRoutes.mocked.test.ts
  ● Friend Routes - Mocked Error Tests › POST /request error handling › should handle notification service failure gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      194 |
      195 |       // Should still succeed even if notification fails
    > 196 |       expect(res.status).toBe(200);
          |                          ^
      197 |       expect(res.body.success).toBe(true);
      198 |     });
      199 |   });

      at Object.<anonymous> (tests/mocked/friendRoutes.mocked.test.ts:196:26)

FAIL tests/unmocked/friendRoutesAdvanced.unmocked.test.ts
  ● Advanced Friend Routes Tests › should remove bilateral friendships on delete

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      114 |     const count2 = await Friendship.countDocuments({ userId: user2._id, friendId: user1._id });
      115 |
    > 116 |     expect(count1).toBe(0);
          |                    ^
      117 |     expect(count2).toBe(0);
      118 |   });
      119 |

      at Object.<anonymous> (tests/unmocked/friendRoutesAdvanced.unmocked.test.ts:116:20)

FAIL tests/unmocked/movie.unmocked.test.ts (22.287 s)
  ● Unmocked: GET /movies/search › should return search results for valid movie query

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 500

      46 |       .query({ query: 'Inception' });
      47 |
    > 48 |     expect(res.status).toStrictEqual(200);
         |                        ^
      49 |     expect(Array.isArray(res.body.results || res.body)).toBe(true);
      50 |   });
      51 |

      at Object.<anonymous> (tests/unmocked/movie.unmocked.test.ts:48:24)

  ● Unmocked: DELETE /movies/ranked/:id › should delete ranked movie and adjust ranks

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      216 |       .set('Authorization', `Bearer ${token}`);
      217 |
    > 218 |     expect(res.status).toStrictEqual(200);
          |                        ^
      219 |
      220 |     // Verify movie is deleted
      221 |     const remaining = await RankedMovie.find({ userId: user._id });

      at Object.<anonymous> (tests/unmocked/movie.unmocked.test.ts:218:24)

FAIL tests/unmocked/friendOperations.unmocked.test.ts (23.393 s)
  ● Unmocked: POST /friends/request - Additional Tests › should reject duplicate friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      104 |       .send({ email: user2.email });
      105 |
    > 106 |     expect(res.status).toStrictEqual(400);
          |                        ^
      107 |     expect(res.body.message).toMatch(/already|pending/i);
      108 |   });
      109 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:106:24)

  ● Unmocked: POST /friends/request - Additional Tests › should reject request to existing friend

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 409

      124 |       .send({ email: user2.email });
      125 |
    > 126 |     expect(res.status).toStrictEqual(400);
          |                        ^
      127 |     expect(res.body.message).toMatch(/already.*friend/i);
      128 |   });
      129 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:126:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should accept friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      209 |       });
      210 |
    > 211 |     expect(res.status).toStrictEqual(200);
          |                        ^
      212 |     expect(res.body.success).toStrictEqual(true);
      213 |
      214 |     const friendship = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:211:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should reject friend request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 400

      241 |       });
      242 |
    > 243 |     expect(res.status).toStrictEqual(200);
          |                        ^
      244 |     expect(res.body.success).toStrictEqual(true);
      245 |
      246 |     const friendship = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:243:24)

  ● Unmocked: POST /friends/respond - Additional Tests › should return 404 for non-existent request

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 404
    Received: 400

      284 |       });
      285 |
    > 286 |     expect(res.status).toStrictEqual(404);
          |                        ^
      287 |   });
      288 |
      289 |   // Input: Missing requestId

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:286:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should remove friend (bidirectional)

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      369 |       .set('Authorization', `Bearer ${token1}`);
      370 |
    > 371 |     expect(res.status).toStrictEqual(200);
          |                        ^
      372 |     expect(res.body.success).toStrictEqual(true);
      373 |
      374 |     const friendship1 = await Friendship.findOne({

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:371:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should reject invalid friend ID format

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      407 |       .set('Authorization', `Bearer ${token1}`);
      408 |
    > 409 |     expect(res.status).toStrictEqual(400);
          |                        ^
      410 |   });
      411 |
      412 |   // Input: Remove self as friend

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:409:24)

  ● Unmocked: DELETE /friends/:friendId - Additional Tests › should reject removing self

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      419 |       .set('Authorization', `Bearer ${token1}`);
      420 |
    > 421 |     expect(res.status).toStrictEqual(400);
          |                        ^
      422 |   });
      423 | });
      424 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:421:24)

  ● Unmocked: GET /friends/search - Search Users › should search users by email

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      463 |       .query({ query: 'searchable' });
      464 |
    > 465 |     expect(res.status).toStrictEqual(200);
          |                        ^
      466 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      467 |   });
      468 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:465:24)

  ● Unmocked: GET /friends/search - Search Users › should search users by name

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      477 |       .query({ query: 'Searchable' });
      478 |
    > 479 |     expect(res.status).toStrictEqual(200);
          |                        ^
      480 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      481 |   });
      482 |

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:479:24)

  ● Unmocked: GET /friends/search - Search Users › should reject empty search query

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      491 |       .query({ query: '' });
      492 |
    > 493 |     expect(res.status).toStrictEqual(400);
          |                        ^
      494 |   });
      495 |
      496 |   // Input: Search with no matches

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:493:24)

  ● Unmocked: GET /friends/search - Search Users › should return empty array for no matches

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      504 |       .query({ query: 'nonexistentuser12345' });
      505 |
    > 506 |     expect(res.status).toStrictEqual(200);
          |                        ^
      507 |     expect(Array.isArray(res.body.users || res.body)).toBe(true);
      508 |   });
      509 | });

      at Object.<anonymous> (tests/unmocked/friendOperations.unmocked.test.ts:506:24)

FAIL tests/nfr/performance.test.ts (23.672 s)
  ● NFR: Performance - Response Time › should respond to GET /movies/ranked within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      60 |     const responseTime = Date.now() - startTime;
      61 |
    > 62 |     expect(res.status).toStrictEqual(200);
         |                        ^
      63 |     expect(responseTime).toBeLessThan(ACCEPTABLE_RESPONSE_TIME_MS);
      64 |   });
      65 |

      at Object.<anonymous> (tests/nfr/performance.test.ts:62:24)

  ● NFR: Performance - Response Time › should sign out user within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      75 |     const responseTime = Date.now() - startTime;
      76 |
    > 77 |     expect(res.status).toStrictEqual(200);
         |                        ^
      78 |     expect(responseTime).toBeLessThan(500);
      79 |   });
      80 |

      at Object.<anonymous> (tests/nfr/performance.test.ts:77:24)

  ● NFR: Performance - Response Time › should limit feed results to prevent memory bloat

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      117 |       .set('Authorization', `Bearer ${token}`);
      118 |
    > 119 |     expect(res.status).toStrictEqual(200);
          |                        ^
      120 |     expect(Array.isArray(res.body)).toBe(true);
      121 |     // Feed should limit results, verify it's not unbounded
      122 |     expect(res.body.length).toBeLessThanOrEqual(50);

      at Object.<anonymous> (tests/nfr/performance.test.ts:119:24)

  ● NFR: Performance - Database Index Efficiency › should efficiently fetch ranked movies using indexes

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      166 |     const queryTime = Date.now() - startTime;
      167 |
    > 168 |     expect(res.status).toStrictEqual(200);
          |                        ^
      169 |     expect(Array.isArray(res.body)).toBe(true);
      170 |     expect(res.body.length).toBe(100);
      171 |     // With proper indexing, 100 items should still be fast

      at Object.<anonymous> (tests/nfr/performance.test.ts:168:24)

  ● NFR: Performance - Bulk Operations › should complete cascade delete within acceptable time

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 200
    Received: 404

      236 |     const deleteTime = Date.now() - startTime;
      237 |
    > 238 |     expect(res.status).toStrictEqual(200);
          |                        ^
      239 |     expect(deleteTime).toBeLessThan(ACCEPTABLE_BULK_TIME_MS);
      240 |   });
      241 | });

      at Object.<anonymous> (tests/nfr/performance.test.ts:238:24)

FAIL tests/unmocked/userRoutes.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m191[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m191[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m300[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m300[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m408[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m408[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m473[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m473[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m
    [96mtests/unmocked/userRoutes.unmocked.test.ts[0m:[93m573[0m:[93m30[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m573[0m       await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                             ~~~~~~~~~~~[0m

FAIL tests/unmocked/feedRouteHandlers.unmocked.test.ts (28.039 s)
  ● Feed Route Handlers - Inline Handlers › should establish SSE stream

    thrown: "Exceeded timeout of 10000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      289 |
      290 |   // Test Case 12: GET /stream (SSE)
    > 291 |   it('should establish SSE stream', async () => {
          |   ^
      292 |     const res = await request(app)
      293 |       .get('/stream')
      294 |       .set('Authorization', `Bearer ${token1}`)

      at tests/unmocked/feedRouteHandlers.unmocked.test.ts:291:3
      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:19:1)

  ● Feed Route Handlers - Inline Handlers › should like an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      313 |       .set('Authorization', `Bearer ${token1}`);
      314 |
    > 315 |     expect(res.status).toBe(200);
          |                        ^
      316 |
      317 |     // Verify like was created
      318 |     const like = await Like.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:315:24)

  ● Feed Route Handlers - Inline Handlers › should allow liking own activity without notification

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      348 |       .set('Authorization', `Bearer ${token1}`);
      349 |
    > 350 |     expect(res.status).toBe(200);
          |                        ^
      351 |   });
      352 |
      353 |   // Test Case 16: POST /:activityId/like duplicate

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:350:24)

  ● Feed Route Handlers - Inline Handlers › should handle duplicate like gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 400, 409, 500]

      372 |
      373 |     // Should handle duplicate (unique index error)
    > 374 |     expect([200, 400, 409, 500]).toContain(res.status);
          |                                  ^
      375 |   });
      376 |
      377 |   // Test Case 17: DELETE /:activityId/like

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:374:34)

  ● Feed Route Handlers - Inline Handlers › should unlike an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      395 |       .set('Authorization', `Bearer ${token1}`);
      396 |
    > 397 |     expect(res.status).toBe(200);
          |                        ^
      398 |
      399 |     // Verify like was deleted
      400 |     const like = await Like.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:397:24)

  ● Feed Route Handlers - Inline Handlers › should get comments for an activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      450 |       .set('Authorization', `Bearer ${token1}`);
      451 |
    > 452 |     expect(res.status).toBe(200);
          |                        ^
      453 |   });
      454 |
      455 |   // Test Case 20: GET /:activityId/comments with no comments

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:452:24)

  ● Feed Route Handlers - Inline Handlers › should return empty array when no comments

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      467 |       .set('Authorization', `Bearer ${token1}`);
      468 |
    > 469 |     expect(res.status).toBe(200);
          |                        ^
      470 |   });
      471 |
      472 |   // Test Case 21: POST /:activityId/comments

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:469:24)

  ● Feed Route Handlers - Inline Handlers › should add comment to activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      485 |       .send({ text: 'Great movie!' });
      486 |
    > 487 |     expect(res.status).toBe(200);
          |                        ^
      488 |
      489 |     // Verify comment was created
      490 |     const comment = await Comment.findOne({

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:487:24)

  ● Feed Route Handlers - Inline Handlers › should reject comment without text

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      510 |       .send({});
      511 |
    > 512 |     expect(res.status).toBe(400);
          |                        ^
      513 |   });
      514 |
      515 |   // Test Case 23: POST /:activityId/comments on non-existent activity

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:512:24)

  ● Feed Route Handlers - Inline Handlers › should send notification when commenting

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      540 |       .send({ text: 'Amazing!' });
      541 |
    > 542 |     expect(res.status).toBe(200);
          |                        ^
      543 |   });
      544 |
      545 |   // Test Case 25: POST /:activityId/comments on own activity (no notification)

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:542:24)

  ● Feed Route Handlers - Inline Handlers › should not send notification when commenting on own activity

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      558 |       .send({ text: 'Self comment' });
      559 |
    > 560 |     expect(res.status).toBe(200);
          |                        ^
      561 |   });
      562 |
      563 |   // Test Case 26: Unauthorized access to feed

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:560:24)

  ● Feed Route Handlers - Inline Handlers › should reject unauthorized like

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 404

      598 |       .post(`/api/feed/${(activity as any)._id.toString()}/like`);
      599 |
    > 600 |     expect(res.status).toBe(401);
          |                        ^
      601 |   });
      602 |
      603 |   // Test Case 30: Unauthorized comment

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:600:24)

  ● Feed Route Handlers - Inline Handlers › should reject unauthorized comment

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 404

      615 |       .send({ text: 'Comment' });
      616 |
    > 617 |     expect(res.status).toBe(401);
          |                        ^
      618 |   });
      619 | });

      at Object.<anonymous> (tests/unmocked/feedRouteHandlers.unmocked.test.ts:617:24)

FAIL tests/unmocked/rerankController.unmocked.test.ts
  ● Test suite failed to run

    [96mtests/unmocked/rerankController.unmocked.test.ts[0m:[93m474[0m:[93m28[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m474[0m     await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                           ~~~~~~~~~~~[0m
    [96mtests/unmocked/rerankController.unmocked.test.ts[0m:[93m510[0m:[93m28[0m - [91merror[0m[90m TS2454: [0mVariable 'mongoServer' is used before being assigned.

    [7m510[0m     await mongoose.connect(mongoServer.getUri());
    [7m   [0m [91m                           ~~~~~~~~~~~[0m

FAIL tests/unmocked/watchlistRoutes.unmocked.test.ts
  ● Watchlist Routes - Unmocked Tests › POST / › should add movie to watchlist successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      183 |         });
      184 |
    > 185 |       expect(res.status).toBe(200);
          |                          ^
      186 |       expect(res.body.success).toBe(true);
      187 |       expect(res.body.data.movieId).toBe(mockMovies.inception.id);
      188 |       expect(res.body.data.title).toBe(mockMovies.inception.title);

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:185:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should add movie with minimal fields (movieId and title only)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      206 |         });
      207 |
    > 208 |       expect(res.status).toBe(200);
          |                          ^
      209 |       expect(res.body.success).toBe(true);
      210 |       expect(res.body.data.movieId).toBe(550);
      211 |       expect(res.body.data.title).toBe('Fight Club');

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:208:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should enrich missing posterPath from TMDB

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      231 |         });
      232 |
    > 233 |       expect(res.status).toBe(200);
          |                          ^
      234 |       expect(res.body.data.posterPath).toBe('/enriched-poster.jpg');
      235 |       expect(res.body.data.overview).toBe('Enriched overview');
      236 |       expect(mockGet).toHaveBeenCalledWith('/movie/550', { params: { language: 'en-US' } });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:233:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should enrich missing overview from TMDB

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      257 |         });
      258 |
    > 259 |       expect(res.status).toBe(200);
          |                          ^
      260 |       expect(res.body.data.overview).toBe('Enriched overview text');
      261 |       expect(res.body.data.posterPath).toBe('/existing-poster.jpg'); // Existing poster preserved
      262 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:259:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should handle TMDB enrichment failure gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      276 |
      277 |       // Should still succeed even if TMDB fails
    > 278 |       expect(res.status).toBe(200);
          |                          ^
      279 |       expect(res.body.success).toBe(true);
      280 |       expect(res.body.data.movieId).toBe(550);
      281 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:278:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should reject duplicate movie

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 409

      322 |         });
      323 |
    > 324 |       expect(res.status).toBe(400);
          |                          ^
      325 |       expect(res.body.success).toBe(false);
      326 |       expect(res.body.message).toContain('already in watchlist');
      327 |     });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:324:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should allow different users to add same movie

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      342 |         });
      343 |
    > 344 |       expect(res.status).toBe(200);
          |                          ^
      345 |       expect(res.body.success).toBe(true);
      346 |     });
      347 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:344:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should handle movieId as number

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      355 |         });
      356 |
    > 357 |       expect(res.status).toBe(200);
          |                          ^
      358 |       expect(res.body.data.movieId).toBe(550);
      359 |     });
      360 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:357:26)

  ● Watchlist Routes - Unmocked Tests › POST / › should preserve all provided fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      370 |         });
      371 |
    > 372 |       expect(res.status).toBe(200);
          |                          ^
      373 |       expect(res.body.data.movieId).toBe(550);
      374 |       expect(res.body.data.title).toBe('Fight Club');
      375 |       expect(res.body.data.posterPath).toBe('/custom-poster.jpg');

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:372:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle very long movie titles

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      521 |         });
      522 |
    > 523 |       expect(res.status).toBe(200);
          |                          ^
      524 |       expect(res.body.data.title).toBe(longTitle);
      525 |     });
      526 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:523:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle special characters in title

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      536 |         });
      537 |
    > 538 |       expect(res.status).toBe(200);
          |                          ^
      539 |       expect(res.body.data.title).toBe(specialTitle);
      540 |     });
      541 |

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:538:26)

  ● Watchlist Routes - Unmocked Tests › Edge Cases › should handle large movieId numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 201

      565 |         });
      566 |
    > 567 |       expect(res.status).toBe(200);
          |                          ^
      568 |       expect(res.body.data.movieId).toBe(largeId);
      569 |     });
      570 |   });

      at Object.<anonymous> (tests/unmocked/watchlistRoutes.unmocked.test.ts:567:26)


Test Suites: 25 failed, 16 passed, 41 total
Tests:       152 failed, 512 passed, 664 total
Snapshots:   0 total
Time:        43.114 s
Ran all test suites.
